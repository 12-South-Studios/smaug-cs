<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Realm.Library.Database</name>
    </assembly>
    <members>
        <member name="T:Realm.Library.Database.DatabaseHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseHelper.#ctor(Realm.Library.Common.Logging.ILogWrapper)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseHelper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Collections.Generic.List{System.Data.IDataParameter},System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseHelper.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Collections.Generic.List{System.Data.IDataParameter},System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseHelper.ExecuteQuery(System.Data.IDbConnection,System.String,System.Collections.Generic.List{System.Data.IDataParameter},System.String)">
            <summary>
            Executes a query and returns a populated DataTable
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseHelper.ExecuteQuery``1(System.Data.IDbConnection,System.String,System.Collections.Generic.List{System.Data.IDataParameter},System.Func{System.Data.IDataReader,``0},System.String)">
            <summary>
            Executes a query and returns an object of type T
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseHelper.SetupDbCommand(System.Data.IDbConnection,System.Data.IDbCommand,System.String,System.Collections.Generic.List{System.Data.IDataParameter})">
            <summary>
            Sets up the DbCommand parameters that are needed and also populates the parameter collection
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseHelper.ValidateArguments(System.Data.IDbConnection,System.String)">
            <summary>
            Validates the basic arguments that execute functions utilize
            </summary>
        </member>
        <member name="T:Realm.Library.Database.Framework.DatabaseClient">
            <summary>
            Database client handles the building and receiving of database commands and transactions
            </summary>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseClient.#ctor(Realm.Library.Common.IEntity,Realm.Library.Database.Framework.IDatabaseLoadBalancer)">
            <summary>
            Constructor
            </summary>
            <param name="owner"></param>
            <param name="loadBalancer"></param>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseClient.BeginTransaction">
            <summary>
            Starts a new transaction set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseClient.CancelTransaction(System.Int32)">
            <summary>
            Cancels an existing transaction
            </summary>
            <param name="transactionId"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseClient.PerformTransaction(Realm.Library.Common.EventCallback{Realm.Library.Common.RealmEventArgs},Realm.Library.Common.Data.DictionaryAtom)">
            <summary>
            Executes the transaction
            </summary>
            <param name="callback"></param>
            <param name="data"></param>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseClient.AddCommand(System.String,System.String,Realm.Library.Common.Data.DictionaryAtom,Realm.Library.Common.EventCallback{Realm.Library.Common.RealmEventArgs},Realm.Library.Common.Data.DictionaryAtom)">
            <summary>
            Add a new database command to the current transaction set
            </summary>
            <param name="schema"> </param>
            <param name="commandName"></param>
            <param name="args"></param>
            <param name="callback"></param>
            <param name="data"></param>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseClient.OnTransactionComplete(Realm.Library.Database.Framework.DatabaseResponseEventArgs)">
            <summary>
            Callback function which handles the response of a transaction from a DatabaseServer
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseClient.IssueCallback(Realm.Library.Common.EventCallback{Realm.Library.Common.RealmEventArgs},System.Boolean,Realm.Library.Common.Data.Atom,Realm.Library.Common.Data.DictionaryAtom)">
            <summary>
            Submits the given callback with the passed data fields
            </summary>
            <param name="callback"></param>
            <param name="success"></param>
            <param name="result"></param>
            <param name="data"></param>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseClient.Dispose">
            <summary>
            Overrides the base Dispose to make this object disposable
            </summary>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseClient.Dispose(System.Boolean)">
            <summary>
            Dispose of any internal resources
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Realm.Library.Database.Framework.DatabaseClient.Owner">
            <summary>
            Owner of the module
            </summary>
        </member>
        <member name="T:Realm.Library.Database.Framework.DatabaseResponseEventArgs">
            <summary>
            Argument class that encapsulates a previously submitted database transaction
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.DatabaseResponseEventArgs.TransactionId">
            <summary>
            Id of the transaction that was submitted
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.DatabaseResponseEventArgs.CommandResults">
            <summary>
            List of results from the command(s)
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.DatabaseResponseEventArgs.Success">
            <summary>
            Flag indicating the success or failure of one or more commands within the transaction
            </summary>
        </member>
        <member name="T:Realm.Library.Database.Framework.DatabaseServer">
            <summary>
            Database Server class handles the execution of database procedures
            </summary>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseServer.#ctor(System.Int64,System.String,Realm.Library.Common.Logging.LogWrapper,System.Collections.Generic.IEnumerable{Realm.Library.Database.Framework.IProcedureLoader})">
             <summary>
            
             </summary>
             <param name="id"></param>
             <param name="connectionString"></param>
             <param name="log"></param>
             <param name="procedureLoaders"></param>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseServer.Dispose(System.Boolean)">
             <summary>
            
             </summary>
             <param name="disposing"></param>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseServer.ExecuteTransaction(Realm.Library.Database.Framework.PendingTransaction)">
            <summary>
            Spins up a new task to execute the transaction
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseServer.ExecuteNextTransaction(System.Threading.CancellationToken,Realm.Library.Database.Framework.PendingTransaction)">
            <summary>
            Executes the provided transaction
            </summary>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseServer.SetResultSetSuccess(System.Collections.Generic.IEnumerable{Realm.Library.Common.Data.Atom},System.Boolean)">
            <summary>
            Sets the resultsets in the results to the success state
            </summary>
            <param name="commandResults"></param>
            <param name="success"></param>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseServer.ExecuteProcedure(Realm.Library.Common.Data.DictionaryAtom)">
            <summary>
            Executes the procedure using the given command variables
            </summary>
            <param name="dbCommand"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseServer.GetProcedure(System.String,System.String)">
            <summary>
            Gets the procedure with the given name and schema from the repositories
            </summary>
            <param name="schema"> </param>
            <param name="commandName"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseServer.TryRollbackOrCommit(System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Attempt to commit the transaction or roll it back if an exception occurred
            </summary>
            <param name="transaction"></param>
            <param name="success"></param>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseServer.IssueCallback(Realm.Library.Database.Framework.PendingTransaction,Realm.Library.Database.Framework.DatabaseServer.TransactionResponse)">
            <summary>
            Submits the given callback with the passed data fields
            </summary>
            <param name="transaction"></param>
            <param name="response"></param>
        </member>
        <member name="T:Realm.Library.Database.Framework.DatabaseServer.TransactionResponse">
            <summary>
            Internal class defined to handle a response from the transaction call
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.DatabaseServer.TransactionResponse.Success">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.DatabaseServer.TransactionResponse.CommandResults">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Database.Framework.DatabaseServerContext">
            <summary>
            Maintains a thread-safe queue of database server objects
            </summary>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseServerContext.#ctor(Realm.Library.Common.Logging.LogWrapper,System.String,System.Int32,System.Collections.Generic.IEnumerable{Realm.Library.Database.Framework.IProcedureLoader})">
             <summary>
            
             </summary>
             <param name="log"></param>
             <param name="connectionString"></param>
             <param name="numberServers"></param>
             <param name="procedureLoaders"></param>
        </member>
        <member name="M:Realm.Library.Database.Framework.DatabaseServerContext.Dispose(System.Boolean)">
             <summary>
            
             </summary>
             <param name="disposing"></param>
        </member>
        <member name="P:Realm.Library.Database.Framework.DatabaseServerContext.ServerCount">
            <summary>
            Gets the number of servers on the queue
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.DatabaseServerContext.NextServer">
            <summary>
            Gets the next server on the queue and then re-enqueues the chosen server.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Realm.Library.Database.DatabaseUtils">
            <summary>
            Utility class for database functions
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseUtils.CreateParameter``1">
            <summary>
            Creates a parameter of the type
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseUtils.CreateParameter``1(System.Object)">
            <summary>
            Creates a parameter of the type using the given object
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseUtils.CreateParameter``1(System.String,System.Object)">
            <summary>
            Creates a paramter with the given name and object
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseUtils.CreateParameter``1(System.String,System.Object,System.Data.DbType)">
            <summary>
            Creates a parameter with the given name, object and type
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseUtils.CreateParameterList``1(System.Object[])">
            <summary>
            Creates a parameter list using the provided objects
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseUtils.CreateParameterList``1(``0[])">
            <summary>
            Creates a parameter list using the provided parameter objects
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseUtils.GetValueOrDefault``1(System.Data.DataRow,System.String,``0)">
            <summary>
            Retrieves a value from the given DataRow and Column or returns
            the default if the column is not present.
            </summary>
        </member>
        <member name="T:Realm.Library.Database.DbParameter">
            <summary>
            Class that implements IDbParameter
            </summary>
        </member>
        <member name="T:Realm.Library.Database.IDbParameter">
            <summary>
            Declares a contract for a database parameter
            </summary>
        </member>
        <member name="P:Realm.Library.Database.DbParameter.DbType">
            <summary>
            Gets the db type
            </summary>
        </member>
        <member name="P:Realm.Library.Database.DbParameter.Direction">
            <summary>
            Gets the parameter direction
            </summary>
        </member>
        <member name="P:Realm.Library.Database.DbParameter.IsNullable">
            <summary>
            Gets if this parameter is nullable
            </summary>
        </member>
        <member name="P:Realm.Library.Database.DbParameter.ParameterName">
            <summary>
            Gets the name of the parameter
            </summary>
        </member>
        <member name="P:Realm.Library.Database.DbParameter.SourceColumn">
            <summary>
            Gets the source column of the parameter
            </summary>
        </member>
        <member name="P:Realm.Library.Database.DbParameter.SourceVersion">
            <summary>
            Gets the data row version
            </summary>
        </member>
        <member name="P:Realm.Library.Database.DbParameter.Value">
            <summary>
            Gets the value of the parameter
            </summary>
        </member>
        <member name="T:Realm.Library.Database.DatabaseExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseExtensions.PopulateCommandArgs(System.Data.IDbCommand,System.Collections.Generic.IDictionary{System.String,System.Data.IDataParameter},System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>
            
             </summary>
             <param name="command"></param>
             <param name="parameters"></param>
             <param name="args"></param>
        </member>
        <member name="M:Realm.Library.Database.DatabaseExtensions.AddWithValue``1(System.Data.IDataParameterCollection,System.String,System.Object)">
             <summary>
            
             </summary>
             <param name="parameterCollection"></param>
             <param name="parameterName"></param>
             <param name="parameterValue"></param>
        </member>
        <member name="M:Realm.Library.Database.DatabaseExtensions.TryOpen(System.Data.IDbConnection)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Database.DatabaseExtensions.RollbackOrCommit(System.Data.IDbTransaction,Realm.Library.Database.TransactionAction)">
             <summary>
            
             </summary>
             <param name="transaction"></param>
             <param name="actionToTake"></param>
        </member>
        <member name="M:Realm.Library.Database.DatabaseExtensions.ToListAtom(System.Data.DataTable)">
            <summary>
            Converts a datatable to a listatom
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="T:Realm.Library.Database.Framework.ProcedureKey">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Database.Framework.ProcedureKey.#ctor(System.String,System.String)">
             <summary>
            
             </summary>
             <param name="schema"></param>
             <param name="name"></param>
        </member>
        <member name="M:Realm.Library.Database.Framework.ProcedureKey.IsEqual(System.String,System.String)">
             <summary>
            
             </summary>
             <param name="schema"></param>
             <param name="name"></param>
             <returns></returns>
        </member>
        <member name="P:Realm.Library.Database.Framework.ProcedureKey.Schema">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.ProcedureKey.Name">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Database.Framework.IDatabaseLoadBalancer">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Database.Framework.IDatabaseLoadBalancer.ExecuteTransaction(Realm.Library.Database.Framework.PendingTransaction)">
             <summary>
            
             </summary>
             <param name="transaction"></param>
        </member>
        <member name="T:Realm.Library.Database.IDatabaseWrapper">
            <summary>
            Declares a contract for a database wrapper
            </summary>
        </member>
        <member name="M:Realm.Library.Database.IDatabaseWrapper.Execute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a database procedure with a dictionary of arguments
            </summary>
            <param name="procedureName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Database.IDatabaseWrapper.Execute(System.String,System.Data.DataTable@,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a database procedure with a dictionary of arguments and a datatable
            </summary>
            <param name="procedureName"></param>
            <param name="dataTable"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Database.IDatabaseWrapper.RegisterProcedure(Realm.Library.Database.IProcedure)">
            <summary>
            Registers a database procedure with the wrapper
            </summary>
            <param name="procedure"></param>
        </member>
        <member name="M:Realm.Library.Database.IDatabaseWrapper.HasProcedure(System.String)">
            <summary>
            Gets if the wrapper has a procedure with the given name
            </summary>
            <param name="procedureName"></param>
            <returns></returns>
        </member>
        <member name="P:Realm.Library.Database.IDatabaseWrapper.ConnectionString">
            <summary>
            Gets the connection string
            </summary>
        </member>
        <member name="T:Realm.Library.Database.IProcedure">
            <summary>
            Declares a contract for a database procedure
            </summary>
        </member>
        <member name="M:Realm.Library.Database.IProcedure.AddParameter(System.String,System.Data.DbType)">
            <summary>
            Adds a parameter to the procedure
            </summary>
            <param name="parameterName"></param>
            <param name="paramType"></param>
        </member>
        <member name="M:Realm.Library.Database.IProcedure.AddParameter(Realm.Library.Database.IDbParameter)">
             <summary>
            
             </summary>
             <param name="parameter"></param>
        </member>
        <member name="M:Realm.Library.Database.IProcedure.ToString">
            <summary>
            Converts the procedure to a string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Realm.Library.Database.IProcedure.Name">
            <summary>
            Gets the name of the procedure
            </summary>
        </member>
        <member name="P:Realm.Library.Database.IProcedure.CommandText">
            <summary>
            Gets the text of the procedure
            </summary>
        </member>
        <member name="P:Realm.Library.Database.IProcedure.CommandType">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.IProcedure.NumberParameters">
            <summary>
            Gets the number of parameters
            </summary>
        </member>
        <member name="P:Realm.Library.Database.IProcedure.ParameterList">
            <summary>
            Gets an enumerable list of parameters
            </summary>
        </member>
        <member name="P:Realm.Library.Database.IProcedure.Parameters">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Database.Framework.IProcedureLoader">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.IProcedureLoader.ProcedureRepository">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="T:Realm.Library.Database.Framework.IProcedureRepository">
            <summary>
            Declares a contract for a procedure repository
            </summary>
        </member>
        <member name="T:Realm.Library.Database.Framework.PendingCommand">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Database.Framework.PendingCommand.#ctor(Realm.Library.Database.Framework.DatabaseClient)">
             <summary>
            
             </summary>
             <param name="owner"></param>
        </member>
        <member name="P:Realm.Library.Database.Framework.PendingCommand.Owner">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.PendingCommand.Callback">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.PendingCommand.Data">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Database.Framework.PendingTransaction">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Database.Framework.PendingTransaction.#ctor(Realm.Library.Database.Framework.DatabaseClient,System.Int32)">
             <summary>
            
             </summary>
             <param name="owner"></param>
             <param name="transactionId"></param>
        </member>
        <member name="M:Realm.Library.Database.Framework.PendingTransaction.AddPendingCommand(Realm.Library.Database.Framework.PendingCommand)">
             <summary>
            
             </summary>
             <param name="command"></param>
        </member>
        <member name="P:Realm.Library.Database.Framework.PendingTransaction.Owner">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.PendingTransaction.TransactionId">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.PendingTransaction.State">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.PendingTransaction.Data">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.PendingTransaction.TransactionCallback">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.PendingTransaction.Callback">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.PendingTransaction.PendingCommands">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.PendingTransaction.DbCommands">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Database.Procedure`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="M:Realm.Library.Database.Procedure`1.#ctor(System.String,System.String,System.Data.CommandType)">
            <summary>
            Constructor
            </summary>
            <param name="schema"> </param>
            <param name="name"></param>
            <param name="commandType"></param>
        </member>
        <member name="M:Realm.Library.Database.Procedure`1.AddParameter(System.String,System.Data.DbType)">
            <summary>
            Adds a parameter to the procedure
            </summary>
            <param name="parameterName"></param>
            <param name="paramType"></param>
        </member>
        <member name="M:Realm.Library.Database.Procedure`1.AddParameter(Realm.Library.Database.IDbParameter)">
             <summary>
            
             </summary>
             <param name="parameter"></param>
        </member>
        <member name="M:Realm.Library.Database.Procedure`1.ToString">
            <summary>
            Converts the procedure to a string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Realm.Library.Database.Procedure`1.Schema">
            <summary>
            Gets the schema of the procedure
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Procedure`1.Name">
            <summary>
            Gets the name of the procedure
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Procedure`1.CommandText">
            <summary>
            Gets the text of the procedure
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Procedure`1.CommandType">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Procedure`1.NumberParameters">
            <summary>
            Gets the number of parameters
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Procedure`1.ParameterList">
            <summary>
            Gets an enumerable list of parameters
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Procedure`1.Parameters">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Database.Framework.ProcedureLoader`1">
            <summary>
            Builds a repository of stored procedures indexed by procedure name
            </summary>
        </member>
        <member name="M:Realm.Library.Database.Framework.ProcedureLoader`1.#ctor(System.String,Realm.Library.Common.Logging.LogWrapper)">
             <summary>
            
             </summary>
             <param name="connectionString"></param>
             <param name="log"></param>
        </member>
        <member name="P:Realm.Library.Database.Framework.ProcedureLoader`1.Connection">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.ProcedureLoader`1.Log">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Database.Framework.ProcedureLoader`1.ProcedureRepository">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="T:Realm.Library.Database.ProcedureExecutor`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="M:Realm.Library.Database.ProcedureExecutor`1.#ctor(System.Data.IDbConnection,Realm.Library.Common.Logging.LogWrapper,Realm.Library.Database.IProcedure)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="log"></param>
             <param name="procedure"></param>
        </member>
        <member name="M:Realm.Library.Database.ProcedureExecutor`1.ExecuteNonQuery(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes the procedure with a given command and dictionary of arguments
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Database.ProcedureExecutor`1.ExecuteQuery(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes the procedure with the given command and dictionary of arguments
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Realm.Library.Database.ProcedureFailureException">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Database.ProcedureFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="M:Realm.Library.Database.ProcedureFailureException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Database.ProcedureFailureException.#ctor(System.String)">
             <summary>
            
             </summary>
             <param name="msg"></param>
        </member>
        <member name="M:Realm.Library.Database.ProcedureFailureException.#ctor(System.String,System.Exception)">
             <summary>
            
             </summary>
             <param name="msg"></param>
             <param name="ex"></param>
        </member>
        <member name="M:Realm.Library.Database.ProcedureFailureException.#ctor(System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="msg"></param>
             <param name="args"></param>
        </member>
        <member name="T:Realm.Library.Database.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Properties.Resources.ERR_DB_PROC_NOT_FOUND">
            <summary>
              Looks up a localized string similar to Db Procedure {0}.{1} not found..
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Properties.Resources.ERR_INVALID_TRANS_ID">
            <summary>
              Looks up a localized string similar to Transaction Id was invalid.
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Properties.Resources.ERR_NULL_PARAMETER">
            <summary>
              Looks up a localized string similar to Parameter is null.
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Properties.Resources.ERR_PENDING_TRANS_NOT_FOUND">
            <summary>
              Looks up a localized string similar to Pending Transaction {0} not found..
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Properties.Resources.ERR_UNSUPPORTED_DBTYPE">
            <summary>
              Looks up a localized string similar to Referenced an unsupported DbType.
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Properties.Resources.ERR_UNSUPPORTED_SQLTYPE">
            <summary>
              Looks up a localized string similar to Referenced an unsupported SqlDbType.
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Properties.Resources.ERR_UNSUPPORTED_TYPE">
            <summary>
              Looks up a localized string similar to Referenced an unsupported Type.
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Properties.Resources.MSG_PROC_TOSTRING">
            <summary>
              Looks up a localized string similar to {0}:{1}[{2}].
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Properties.Resources.MSG_TRANS_CANCELLED">
            <summary>
              Looks up a localized string similar to Transaction {0} cancelled..
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Properties.Resources.MSG_TRANS_COMPLETE">
            <summary>
              Looks up a localized string similar to Transaction {0} completed. Status {1}.
            </summary>
        </member>
        <member name="P:Realm.Library.Database.Properties.Resources.MSG_TRANS_SUBMIT">
            <summary>
              Looks up a localized string similar to Transaction {0} submitted..
            </summary>
        </member>
        <member name="T:Realm.Library.Database.StoredProcedure`1">
            <summary>
            Class that defines a stored procedure in a sql database
            </summary>
        </member>
        <member name="M:Realm.Library.Database.StoredProcedure`1.#ctor(System.String,System.String)">
             <summary>
            
             </summary>
             <param name="schema"> </param>
             <param name="name"></param>
        </member>
        <member name="T:Realm.Library.Database.Framework.ProcedureRepository">
            <summary>
            Class that is a repository for database procedures
            </summary>
        </member>
        <member name="T:Realm.Library.Database.TextProcedure`1">
            <summary>
            Class that defines a text procedure in a sql database
            </summary>
        </member>
        <member name="M:Realm.Library.Database.TextProcedure`1.#ctor(System.String,System.String)">
             <summary>
            
             </summary>
             <param name="schema"> </param>
             <param name="name"></param>
        </member>
        <member name="T:Realm.Library.Database.Framework.TransactionState">
            <summary>
            The state of the transaction
            </summary>
        </member>
        <member name="F:Realm.Library.Database.Framework.TransactionState.Building">
            <summary>
            The transaction is in a Building state
            </summary>
        </member>
        <member name="F:Realm.Library.Database.Framework.TransactionState.Executing">
            <summary>
            The transaction is being executed
            </summary>
        </member>
        <member name="F:Realm.Library.Database.Framework.TransactionState.Processing">
            <summary>
            The transaction has executed and is being processed
            </summary>
        </member>
        <member name="F:Realm.Library.Database.Framework.TransactionState.Cancelling">
            <summary>
            The transaction is being cancelled
            </summary>
        </member>
        <member name="T:Realm.Library.Database.DatabaseTypeConverter">
            <summary>
            Convert a base data type to another base data type
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/cc716729.aspx</remarks>
        </member>
        <member name="M:Realm.Library.Database.DatabaseTypeConverter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseTypeConverter.Get(System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Database.DatabaseTypeConverter.Get(System.Data.SqlDbType)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Database.DatabaseTypeConverter.GetDbType(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Realm.Library.Database.DatabaseTypeConverter.GetDbType(System.Data.SqlDbType)">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
