<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Realm.Library.Common</name>
    </assembly>
    <members>
        <member name="T:Realm.Library.Common.ArticleAppendOptions">
             <summary>
            
             </summary>
        </member>
        <member name="F:Realm.Library.Common.ArticleAppendOptions.None">
            <summary>
            No options
            </summary>
        </member>
        <member name="F:Realm.Library.Common.ArticleAppendOptions.NewLineToEnd">
            <summary>
            Append a New Line (Carriage Return) to the end of the string
            </summary>
        </member>
        <member name="F:Realm.Library.Common.ArticleAppendOptions.TheToFront">
            <summary>
            Append "The" to the front of the string
            </summary>
        </member>
        <member name="F:Realm.Library.Common.ArticleAppendOptions.CapitalizeFirstLetter">
            <summary>
            Capitalize the first letter of the string
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Caching.CachedObjectRepository`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Realm.Library.Common.Caching.CachedObjectRepository`2.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="cacheDurationSeconds"></param>
        </member>
        <member name="M:Realm.Library.Common.Caching.CachedObjectRepository`2.Add(`0,`1)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Caching.CachedObjectRepository`2.Delete(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Caching.CachedObjectRepository`2.Contains(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Caching.CachedObjectRepository`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Caching.CachedObjectRepository`2.Get(`0)">
            <summary>
            Gets the entity by key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Realm.Library.Common.Caching.CachedObjectRepository`2.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Caching.CachedObjectRepository`2.Keys">
            <summary>
            Gets the keys
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Caching.CachedObjectRepository`2.Values">
            <summary>
            Gets the values
            </summary>
        </member>
        <member name="T:Realm.Library.Common.IMemoryCacheWrapper`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="M:Realm.Library.Common.IMemoryCacheWrapper`1.AddOrUpdate(System.String,`0)">
             <summary>
            
             </summary>
             <param name="key"></param>
             <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.IMemoryCacheWrapper`1.TryGetValue(System.String,`0@)">
             <summary>
            
             </summary>
             <param name="key"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.IMemoryCacheWrapper`1.TryRemove(System.String,`0@)">
             <summary>
            
             </summary>
             <param name="key"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.IMemoryCacheWrapper`1.Remove(System.String)">
             <summary>
            
             </summary>
             <param name="key"></param>
        </member>
        <member name="M:Realm.Library.Common.IMemoryCacheWrapper`1.ContainsKey(System.String)">
             <summary>
            
             </summary>
             <param name="key"></param>
             <returns></returns>
        </member>
        <member name="P:Realm.Library.Common.IMemoryCacheWrapper`1.Name">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.IMemoryCacheWrapper`1.CacheMemoryLimitInBytes">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.IMemoryCacheWrapper`1.PhysicalMemoryLimit">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.IMemoryCacheWrapper`1.PollingInterval">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.IMemoryCacheWrapper`1.CacheItemPolicy">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.IMemoryCacheWrapper`1.Count">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.MemoryCacheWrapper`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="M:Realm.Library.Common.MemoryCacheWrapper`1.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
             <summary>
            
             </summary>
             <param name="name"></param>
             <param name="config"></param>
        </member>
        <member name="M:Realm.Library.Common.MemoryCacheWrapper`1.Finalize">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.MemoryCacheWrapper`1.AddOrUpdate(System.String,`0)">
             <summary>
            
             </summary>
             <param name="key"></param>
             <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.MemoryCacheWrapper`1.TryGetValue(System.String,`0@)">
             <summary>
            
             </summary>
             <param name="key"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.MemoryCacheWrapper`1.TryRemove(System.String,`0@)">
             <summary>
            
             </summary>
             <param name="key"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.MemoryCacheWrapper`1.Remove(System.String)">
             <summary>
            
             </summary>
             <param name="key"></param>
        </member>
        <member name="M:Realm.Library.Common.MemoryCacheWrapper`1.ContainsKey(System.String)">
             <summary>
            
             </summary>
             <param name="key"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.MemoryCacheWrapper`1.Dispose">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.MemoryCacheWrapper`1.Dispose(System.Boolean)">
             <summary>
            
             </summary>
             <param name="disposing"></param>
        </member>
        <member name="P:Realm.Library.Common.MemoryCacheWrapper`1.Name">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.MemoryCacheWrapper`1.CacheMemoryLimitInBytes">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.MemoryCacheWrapper`1.PhysicalMemoryLimit">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.MemoryCacheWrapper`1.PollingInterval">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.MemoryCacheWrapper`1.CacheItemPolicy">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.MemoryCacheWrapper`1.Count">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.CaseCompareResult">
            <summary>
            
            </summary>
        </member>
        <member name="F:Realm.Library.Common.CaseCompareResult.Equal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Realm.Library.Common.CaseCompareResult.LessThan">
            <summary>
            
            </summary>
        </member>
        <member name="F:Realm.Library.Common.CaseCompareResult.GreaterThan">
            <summary>
            
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Collections.BidirectionalDictionary`2">
            <summary>
            
            </summary>
            <remarks>Used without permission from http://timbar.blogspot.com/2011/01/c-bidirectional-lookup.html</remarks>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="M:Realm.Library.Common.Collections.BidirectionalDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IEnumerable{`1}},System.Collections.Generic.IDictionary{`1,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            
            </summary>
            <param name="forward"></param>
            <param name="backward"></param>
        </member>
        <member name="M:Realm.Library.Common.Collections.BidirectionalDictionary`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Collections.BidirectionalDictionary`2.Add(`0,`1)">
            <summary>
            
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Realm.Library.Common.Collections.BidirectionalDictionary`2.GetByFirst(`0)">
            <summary>
            
            </summary>
            <param name="first"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Collections.BidirectionalDictionary`2.GetBySecond(`1)">
            <summary>
            
            </summary>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Collections.BidirectionalDictionary`2.Remove(`0,`1)">
            <summary>
            
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="T:Realm.Library.Common.NaturalSortStringComparer">
            <summary>
            Natural Sort comparer implementation that allows you to take strings
            that contain numeric data and sort them in a natural manner.
            Obtained from: http://zootfroot.blogspot.com/2009/09/natural-sort-compare-with-linq-orderby.html
            </summary>
        </member>
        <member name="M:Realm.Library.Common.NaturalSortStringComparer.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="inAscendingOrder"></param>
        </member>
        <member name="M:Realm.Library.Common.NaturalSortStringComparer.Compare(System.String,System.String)">
             <summary>
            
             </summary>
             <param name="x"></param>
             <param name="y"></param>
             <returns></returns>
             <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Realm.Library.Common.NaturalSortStringComparer.Dispose">
            <summary>
            Overrides the base Dispose to make this object disposable
            </summary>
        </member>
        <member name="M:Realm.Library.Common.NaturalSortStringComparer.Dispose(System.Boolean)">
            <summary>
            Dispose of any internal resources
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Realm.Library.Common.BitContext">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.BaseContext`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="M:Realm.Library.Common.BaseContext`1.#ctor(`0)">
             <summary>
            
             </summary>
             <param name="owner"></param>
        </member>
        <member name="P:Realm.Library.Common.BaseContext`1.Owner">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.IBitContext">
            <summary>
            Declares the contract for an object that can handle a bit field
            </summary>
        </member>
        <member name="T:Realm.Library.Common.IContext">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.IBitContext.HasBit(System.Int32)">
            <summary>
            Gets whether or not the object has the given bit
            </summary>
            <param name="bit">Bit value</param>
            <returns>Returns whether or not the object has the bit</returns>
        </member>
        <member name="M:Realm.Library.Common.IBitContext.HasBit(System.Enum)">
            <summary>
            Gets whether or not the object has the given enum (with a bit value)
            </summary>
            <param name="value">Enum value</param>
            <returns>Returns whether or not the object has the enum</returns>
        </member>
        <member name="M:Realm.Library.Common.IBitContext.SetBit(System.Int32)">
            <summary>
            Sets the given bit onto the object
            </summary>
            <param name="bit">Bit value</param>
        </member>
        <member name="M:Realm.Library.Common.IBitContext.SetBit(System.Enum)">
            <summary>
            Sets the given enum (with a bit value) onto the object
            </summary>
            <param name="value">Enum value</param>
        </member>
        <member name="M:Realm.Library.Common.IBitContext.UnsetBit(System.Int32)">
            <summary>
            Removes the bit value from the object
            </summary>
            <param name="bit">Bit value</param>
        </member>
        <member name="M:Realm.Library.Common.IBitContext.UnsetBit(System.Enum)">
            <summary>
            Removes the enum (with a bit value) from the object
            </summary>
            <param name="value">Enum value</param>
        </member>
        <member name="M:Realm.Library.Common.IBitContext.SetBits(System.Int32)">
            <summary>
            Sets all of the bits for the object. Overwrites any existing.
            </summary>
            <param name="value">Bit value</param>
        </member>
        <member name="P:Realm.Library.Common.IBitContext.GetBits">
            <summary>
            Gets the total value of the object's bit-field
            </summary>
            <returns>Returns an integer value</returns>
        </member>
        <member name="M:Realm.Library.Common.BitContext.#ctor(Realm.Library.Common.IEntity)">
             <summary>
            
             </summary>
             <param name="owner"></param>
        </member>
        <member name="M:Realm.Library.Common.BitContext.HasBit(System.Int32)">
             <summary>
            
             </summary>
             <param name="bit"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.BitContext.HasBit(System.Enum)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.BitContext.SetBit(System.Int32)">
             <summary>
            
             </summary>
             <param name="bit"></param>
        </member>
        <member name="M:Realm.Library.Common.BitContext.SetBit(System.Enum)">
             <summary>
            
             </summary>
             <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.BitContext.UnsetBit(System.Int32)">
             <summary>
            
             </summary>
             <param name="bit"></param>
        </member>
        <member name="M:Realm.Library.Common.BitContext.UnsetBit(System.Enum)">
             <summary>
            
             </summary>
             <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.BitContext.SetBits(System.Int32)">
             <summary>
            
             </summary>
             <param name="value"></param>
        </member>
        <member name="P:Realm.Library.Common.BitContext.GetBits">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.PropertyContext">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.IPropertyContext">
            <summary>
            Declares the contract for an object that can handle properties
            </summary>
        </member>
        <member name="M:Realm.Library.Common.IPropertyContext.GetProperty``1(System.String)">
            <summary>
            Gets the indicated property by name
            </summary>
            <param name="name">Property name</param>
            <returns>Returns an object representing the property</returns>
        </member>
        <member name="M:Realm.Library.Common.IPropertyContext.SetProperty(System.String,System.Object,Realm.Library.Common.PropertyTypeOptions)">
            <summary>
            Sets the given property with value onto the object
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">Object value to set</param>
            <param name="bits">Bit field of property bits</param>
        </member>
        <member name="M:Realm.Library.Common.IPropertyContext.SetProperty(System.Enum,System.Object,Realm.Library.Common.PropertyTypeOptions)">
            <summary>
            Sets the given property with value onto the object
            </summary>
            <param name="prop">Enumerated property</param>
            <param name="value">Object value to set</param>
            <param name="bits">Bit field of property bits</param>
        </member>
        <member name="M:Realm.Library.Common.IPropertyContext.HasProperty(System.String)">
            <summary>
            Gets whether or not the object has the given property
            </summary>
            <param name="name">Property name</param>
            <returns>Returns whether or not the object has the property</returns>
        </member>
        <member name="M:Realm.Library.Common.IPropertyContext.IsPersistable(System.String)">
            <summary>
            Determines if the given property can be persisted to the database
            </summary>
            <param name="name">Property name</param>
            <returns>Returns true if the given property is persistable</returns>
        </member>
        <member name="M:Realm.Library.Common.IPropertyContext.IsVolatile(System.String)">
            <summary>
            Determines if the given property can be changed
            </summary>
            <param name="name">Property name</param>
            <returns>Returns true if the given property is volatile</returns>
        </member>
        <member name="M:Realm.Library.Common.IPropertyContext.IsVisible(System.String)">
            <summary>
            Determines if the given property is visible
            </summary>
            <param name="name">Property name</param>
            <returns>Returns true if the given property is visible</returns>
        </member>
        <member name="M:Realm.Library.Common.IPropertyContext.RemoveProperty(System.String)">
            <summary>
            Removes a given property from the dictionary
            </summary>
            <param name="name">Property name</param>
            <returns>Returns true if the remove was successful</returns>
        </member>
        <member name="M:Realm.Library.Common.IPropertyContext.GetPropertyBits(System.String)">
            <summary>
            Returns a string compilation representing the Persistable, Volatile and Visible flags
            </summary>
            <param name="name">Property name</param>
            <returns>String of flags (P=Persistable, V=Volatile, I=Visible</returns>
        </member>
        <member name="P:Realm.Library.Common.IPropertyContext.PropertyKeys">
            <summary>
            Gets an enumeration of the property keys from the dictionary
            </summary>
            <returns>Returns an IEnumerable value of the property keys</returns>
        </member>
        <member name="P:Realm.Library.Common.IPropertyContext.Count">
            <summary>
            Gets the number of properties on the object
            </summary>
            <returns>Returns an integer value</returns>
        </member>
        <member name="M:Realm.Library.Common.PropertyContext.#ctor(Realm.Library.Common.IEntity)">
             <summary>
            
             </summary>
             <param name="owner"></param>
        </member>
        <member name="M:Realm.Library.Common.PropertyContext.GetProperty``1(System.String)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="name"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.PropertyContext.SetProperty(System.String,System.Object,Realm.Library.Common.PropertyTypeOptions)">
             <summary>
            
             </summary>
             <param name="name"></param>
             <param name="value"></param>
             <param name="bits"></param>
        </member>
        <member name="M:Realm.Library.Common.PropertyContext.SetProperty(System.Enum,System.Object,Realm.Library.Common.PropertyTypeOptions)">
             <summary>
            
             </summary>
             <param name="aEnum"></param>
             <param name="aValue"></param>
             <param name="bits"></param>
        </member>
        <member name="M:Realm.Library.Common.PropertyContext.HasProperty(System.String)">
             <summary>
            
             </summary>
             <param name="name"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.PropertyContext.IsPersistable(System.String)">
             <summary>
            
             </summary>
             <param name="name"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.PropertyContext.IsVolatile(System.String)">
             <summary>
            
             </summary>
             <param name="name"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.PropertyContext.IsVisible(System.String)">
             <summary>
            
             </summary>
             <param name="name"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.PropertyContext.RemoveProperty(System.String)">
             <summary>
            
             </summary>
             <param name="name"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.PropertyContext.GetPropertyBits(System.String)">
             <summary>
            
             </summary>
             <param name="name"></param>
             <returns></returns>
        </member>
        <member name="P:Realm.Library.Common.PropertyContext.PropertyKeys">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.PropertyContext.Count">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.Data.Atom">
            <summary>
            Abstract class that defines an Atom
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.Atom.#ctor(Realm.Library.Common.Data.AtomType)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.Atom.Dump(log4net.ILog,System.String)">
            <summary>
            Dumps the contents of the Atom with the given prefix
            </summary>
            <param name="log"></param>
            <param name="prefix"></param>
        </member>
        <member name="P:Realm.Library.Common.Data.Atom.Type">
            <summary>
            Gets the type of Atom
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Data.AtomExtensions">
            <summary>
            Defines extension functions for Atoms
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.AtomExtensions.ToAtom``1(System.Int32)">
            <summary>
            Converts to 32-bit integer to an atom
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.AtomExtensions.ToAtom``1(System.Boolean)">
            <summary>
            Converts the boolean value to an atom
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.AtomExtensions.ToAtom``1(System.Int64)">
            <summary>
            Converts the 64-bit integer to an atom
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.AtomExtensions.ToAtom``1(System.Single)">
            <summary>
            Converts the single value to an atom
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.AtomExtensions.ToAtom``1(System.Double)">
            <summary>
            Converts the double value to an atom
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.AtomExtensions.ToAtom``1(System.String)">
            <summary>
            Converts the string value to an atom
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.AtomExtensions.ToAtom(System.Collections.ICollection)">
            <summary>
            Converts a collection into a ListAtom
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.AtomExtensions.ToDictionary(Realm.Library.Common.Data.DictionaryAtom)">
            <summary>
            Converts a dictionary atom into a dictionary of string-object pairs
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.AtomExtensions.ToDictionaryAtom(System.Object)">
            <summary>
            Converts an object and its field values into a DictionaryAtom
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Data.AtomType">
            <summary>
            Enumeration of atom types
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Data.BoolAtom">
            <summary>
            Class that defines a boolean Atom
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.BoolAtom.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.BoolAtom.Dump(log4net.ILog,System.String)">
            <summary>
            Dumps the contents of the Atom with the given prefix
            </summary>
            <param name="log"></param>
            <param name="prefix"></param>
        </member>
        <member name="P:Realm.Library.Common.Data.BoolAtom.Value">
            <summary>
            Gets the value of the atom
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Data.DictionaryAtom">
            <summary>
            Class defines a dictionary atom
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.#ctor(Realm.Library.Common.Data.DictionaryAtom)">
            <summary>
            Copy constructor
            </summary>
            <param name="atom"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.Finalize">
            <summary>
            Deconstructor
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.IsEmpty">
            <summary>
            Gets if teh dictionary is emtpy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.ContainsKey(System.String)">
            <summary>
            Gets if the dictionary contains a string key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.GetAtom``1(System.String)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="key"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.GetInt(System.String)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.GetString(System.String)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.GetBool(System.String)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.GetReal(System.String)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.GetObject(System.String)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.Add(Realm.Library.Common.Data.Atom,Realm.Library.Common.Data.Atom)">
            <summary>
            Adds an atom with the given key
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.Set(System.String,System.String)">
            <summary>
            Sets a string value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.Set(System.String,System.Boolean)">
            <summary>
            Set a boolean value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.Set(System.String,System.Int64)">
            <summary>
            Set a long value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.Set(System.String,System.Int32)">
            <summary>
            Sets an integer value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.Set(System.String,System.Double)">
            <summary>
            Sets a double value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.Set(System.String,System.Single)">
            <summary>
            Sets a float value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.Set(System.String,Realm.Library.Common.Data.ListAtom)">
            <summary>
            SEts a list atom value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.Set(System.String,Realm.Library.Common.Data.DictionaryAtom)">
            <summary>
            Sets a dictionary atom value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.Set(System.String,System.Object)">
            <summary>
            Sets an object value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.DictionaryAtom.Dump(log4net.ILog,System.String)">
            <summary>
            Dumps the contents of the Atom with the given prefix
            </summary>
            <param name="log"></param>
            <param name="prefix"></param>
        </member>
        <member name="P:Realm.Library.Common.Data.DictionaryAtom.Count">
            <summary>
            Gets the number of objects in the dictionary
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Data.DictionaryAtom.Keys">
            <summary>
            Gets an enumerable list of keys
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Data.DictionaryAtom.Values">
            <summary>
            Gets an enumerable collection of values
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Data.IntAtom">
            <summary>
            Class that defines an integer Atom
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.IntAtom.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.IntAtom.#ctor(System.Int64)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.IntAtom.Dump(log4net.ILog,System.String)">
            <summary>
            Dumps the contents of the Atom with the given prefix
            </summary>
            <param name="log"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.IntAtom.Equals(System.Object)">
            <summary>
            Overload of Equals to compare two objects
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.IntAtom.GetHashCode">
            <summary>
            Overload of GetHashCode to provide a different hash code
            </summary>
            <returns></returns>
        </member>
        <member name="P:Realm.Library.Common.Data.IntAtom.Value">
            <summary>
            Gets the value of the atom
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Data.ListAtom">
            <summary>
            Class that defines a list atom
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.Finalize">
            <summary>
            Deconstructor
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.GetEnumerator">
            <summary>
            Gets an enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.GetList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.Get(System.Int32)">
            <summary>
            Gets an Atom at the given index
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.GetString(System.Int32)">
            <summary>
            Gets a string value from the given index
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.GetInt(System.Int32)">
            <summary>
            Gets an integer value from the given index
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.GetObject(System.Int32)">
            <summary>
            Gets an object value from the given index
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.GetList(System.Int32)">
            <summary>
            Gets a list atom from the given index
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.GetDictionary(System.Int32)">
            <summary>
            Gets a dictionary atom from the given index
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.GetBool(System.Int32)">
            <summary>
            Gets a boolean value from the given index
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.GetReal(System.Int32)">
            <summary>
            Gets a double value from the given index
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.Add(Realm.Library.Common.Data.Atom)">
            <summary>
            Adds an atom to the list
            </summary>
            <param name="atom"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.Add(System.String)">
            <summary>
            Adds a string to the list
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.Add(System.Boolean)">
            <summary>
            Adds a boolean to the list
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.Add(System.Int64)">
            <summary>
            Adds a long to the list
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.Add(System.Int32)">
            <summary>
            Adds an integer to the list
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.Add(System.Double)">
            <summary>
            Adds a double to the list
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.Add(System.Single)">
            <summary>
            Adds a float to the list
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.Add(System.Object)">
            <summary>
            Adds an object to the list
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.Add(Realm.Library.Common.Data.ListAtom)">
            <summary>
            Adds a list atom to the list
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.Add(Realm.Library.Common.Data.DictionaryAtom)">
            <summary>
            Adds a dictionary atom the list
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.Clear">
            <summary>
            Clears objects from the list
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.ListAtom.Dump(log4net.ILog,System.String)">
            <summary>
            Dumps the contents of the Atom with the given prefix
            </summary>
            <param name="log"></param>
            <param name="prefix"></param>
        </member>
        <member name="P:Realm.Library.Common.Data.ListAtom.Count">
            <summary>
            Gets the number of objects in the list
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Data.ObjectAtom">
            <summary>
            Class that defines an object Atom
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.ObjectAtom.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.ObjectAtom.Dump(log4net.ILog,System.String)">
            <summary>
            Dumps the contents of the Atom with the given prefix
            </summary>
            <param name="log"></param>
            <param name="prefix"></param>
        </member>
        <member name="P:Realm.Library.Common.Data.ObjectAtom.Value">
            <summary>
            Gets the value of the atom
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Data.RealAtom">
            <summary>
            Class that defines a real Atom
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.RealAtom.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.RealAtom.#ctor(System.Single)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.RealAtom.Dump(log4net.ILog,System.String)">
            <summary>
            Dumps the contents of the Atom with the given prefix
            </summary>
            <param name="log"></param>
            <param name="prefix"></param>
        </member>
        <member name="P:Realm.Library.Common.Data.RealAtom.Value">
            <summary>
            Gets the value of the atom
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Data.StringAtom">
            <summary>
            Class that defines a string Atom
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Data.StringAtom.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.StringAtom.Dump(log4net.ILog,System.String)">
            <summary>
            Dumps the contents of the Atom with the given prefix
            </summary>
            <param name="log"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:Realm.Library.Common.Data.StringAtom.Equals(System.Object)">
            <summary>
            Overload of Equals to compare two objects
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Data.StringAtom.GetHashCode">
            <summary>
            Overload of GetHashCode to provide a different hash code
            </summary>
            <returns></returns>
        </member>
        <member name="P:Realm.Library.Common.Data.StringAtom.Value">
            <summary>
            Gets the value of the atom
            </summary>
        </member>
        <member name="T:Realm.Library.Common.EntityContext`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="T:Realm.Library.Common.IEntityContext`1">
            <summary>
            Public interface for a context that allows the managing of objects
            that implement IContext
            </summary>
        </member>
        <member name="M:Realm.Library.Common.IEntityContext`1.Contains(`0)">
            <summary>
            Gets if the handler contains the entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.IEntityContext`1.Contains(System.Int64)">
            <summary>
            Gets if the handler contains an entity with the given ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.IEntityContext`1.AddEntity(`0)">
            <summary>
            Adds the given entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.IEntityContext`1.AddEntities(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a given list of entities
            </summary>
            <param name="entityList"></param>
        </member>
        <member name="M:Realm.Library.Common.IEntityContext`1.RemoveEntity(`0)">
            <summary>
            Removes an entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.IEntityContext`1.GetEntity(System.Int64)">
            <summary>
            Gets an entity by ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:Realm.Library.Common.IEntityContext`1.Entities">
            <summary>
            Gets a list of entities
            </summary>
        </member>
        <member name="P:Realm.Library.Common.IEntityContext`1.Count">
            <summary>
            Gets the number of entities
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EntityContext`1.#ctor(`0)">
             <summary>
            
             </summary>
             <param name="parent"></param>
        </member>
        <member name="M:Realm.Library.Common.EntityContext`1.Contains(`0)">
             <summary>
            
             </summary>
             <param name="entity"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.EntityContext`1.Contains(System.Int64)">
             <summary>
            
             </summary>
             <param name="id"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.EntityContext`1.AddEntity(`0)">
             <summary>
            
             </summary>
             <param name="entity"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.EntityContext`1.AddEntities(System.Collections.Generic.IEnumerable{`0})">
             <summary>
            
             </summary>
             <param name="entityList"></param>
        </member>
        <member name="M:Realm.Library.Common.EntityContext`1.RemoveEntity(`0)">
             <summary>
            
             </summary>
             <param name="entity"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.EntityContext`1.GetEntity(System.Int64)">
             <summary>
            
             </summary>
             <param name="id"></param>
             <returns></returns>
        </member>
        <member name="P:Realm.Library.Common.EntityContext`1.Entities">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.EntityContext`1.Count">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.IEntityModule">
            <summary>
            Basic entity module contract
            </summary>
        </member>
        <member name="P:Realm.Library.Common.IEntityModule.Owner">
            <summary>
            Owner of the module
            </summary>
        </member>
        <member name="T:Realm.Library.Common.IHelper`1">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.IHelper`1.Get(System.String)">
             <summary>
            
             </summary>
             <param name="key"></param>
             <returns></returns>
        </member>
        <member name="T:Realm.Library.Common.EventCallback`1">
            <summary>
            Format of an event callback
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Realm.Library.Common.EventHandler">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.IEventHandler">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.IEventHandler.RegisterListener(Realm.Library.Common.EventListener)">
             <summary>
            
             </summary>
             <param name="eventListener"></param>
        </member>
        <member name="M:Realm.Library.Common.IEventHandler.IsListening(System.Object,System.Type)">
             <summary>
            
             </summary>
             <param name="listener"></param>
             <param name="listenToEventType"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.IEventHandler.IsListening(System.Object,System.Object,System.Type)">
             <summary>
            
             </summary>
             <param name="listener"></param>
             <param name="listenTo"></param>
             <param name="listenToEventType"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.IEventHandler.StopListeningTo(System.Object,System.Object,System.Type)">
             <summary>
            
             </summary>
             <param name="listener"></param>
             <param name="listenTo"></param>
             <param name="listenToEventType"></param>
        </member>
        <member name="M:Realm.Library.Common.IEventHandler.StopListening(System.Object,System.Type)">
             <summary>
            
             </summary>
             <param name="listener"></param>
             <param name="listenToEventType"></param>
        </member>
        <member name="M:Realm.Library.Common.IEventHandler.StopListening(System.Object)">
             <summary>
            
             </summary>
             <param name="listener"></param>
        </member>
        <member name="M:Realm.Library.Common.IEventHandler.ThrowEvent(System.Object,Realm.Library.Common.IEventBase)">
             <summary>
            
             </summary>
             <param name="sender"></param>
             <param name="thrownEvent"></param>
        </member>
        <member name="M:Realm.Library.Common.IEventHandler.ThrowEvent(System.Object,Realm.Library.Common.IEventBase,Realm.Library.Common.RealmEventArgs)">
             <summary>
            
             </summary>
             <param name="sender"></param>
             <param name="thrownEvent"></param>
             <param name="args"></param>
        </member>
        <member name="M:Realm.Library.Common.IEventHandler.ThrowEvent(System.Object,Realm.Library.Common.IEventBase,Realm.Library.Common.EventTable)">
             <summary>
            
             </summary>
             <param name="sender"></param>
             <param name="thrownEvent"></param>
             <param name="table"></param>
        </member>
        <member name="M:Realm.Library.Common.IEventHandler.ThrowEvent``1(System.Object,Realm.Library.Common.EventTable)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="sender"></param>
             <param name="table"></param>
        </member>
        <member name="M:Realm.Library.Common.IEventHandler.ThrowEvent``1(System.Object)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="sender"></param>
        </member>
        <member name="M:Realm.Library.Common.EventHandler.#ctor(Realm.Library.Common.ITimer,System.Int32,Realm.Library.Common.Logging.ILogWrapper)">
             <summary>
            
             </summary>
             <param name="timer"></param>
             <param name="frequency"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Realm.Library.Common.EventHandler.RegisterListener(Realm.Library.Common.EventListener)">
            <summary>
            Registers an object to listen to another object for a particular event
            and if that event is triggered to use a callback function
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EventHandler.IsListening(System.Object,System.Type)">
            <summary>
            Is the object listening to the given event
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EventHandler.IsListening(System.Object,System.Object,System.Type)">
            <summary>
            Is the object listening to the other object
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EventHandler.StopListeningTo(System.Object,System.Object,System.Type)">
            <summary>
            Removes an object that was being listened to by another object for a particular event
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EventHandler.StopListening(System.Object,System.Type)">
            <summary>
            Removes an object that was listening to a particular event
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EventHandler.StopListening(System.Object)">
            <summary>
            Removes an object that was listening to any event
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EventHandler.ThrowEvent(System.Object,Realm.Library.Common.IEventBase)">
            <summary>
             Enqueues an event onto the event queue
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EventHandler.ThrowEvent(System.Object,Realm.Library.Common.IEventBase,Realm.Library.Common.RealmEventArgs)">
            <summary>
            Overload function for throwing an event
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EventHandler.ThrowEvent(System.Object,Realm.Library.Common.IEventBase,Realm.Library.Common.EventTable)">
            <summary>
            Overload function for throwing an event
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EventHandler.ThrowEvent``1(System.Object,Realm.Library.Common.EventTable)">
            <summary>
            Instantiates and throws an event of the given type
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EventHandler.ThrowEvent``1(System.Object)">
            <summary>
            Instantiates and throws an event of the given type
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EventHandler.TimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Handles a timer event and processes objects listening to
            the given event and sender
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Exceptions.BaseException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.BaseException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.BaseException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.BaseException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.BaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.BaseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Realm.Library.Common.Exceptions.BaseException.ResourceReferenceProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Exceptions.InitializationException">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.InitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.InitializationException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.InitializationException.#ctor(System.String)">
             <summary>
            
             </summary>
             <param name="msg"></param>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.InitializationException.#ctor(System.String,System.Exception)">
             <summary>
            
             </summary>
             <param name="msg"></param>
             <param name="ex"></param>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.InitializationException.#ctor(System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="msg"></param>
             <param name="args"></param>
        </member>
        <member name="T:Realm.Library.Common.Exceptions.InstantiationException">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.InstantiationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.InstantiationException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.InstantiationException.#ctor(System.String)">
             <summary>
            
             </summary>
             <param name="msg"></param>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.InstantiationException.#ctor(System.String,System.Exception)">
             <summary>
            
             </summary>
             <param name="msg"></param>
             <param name="ex"></param>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.InstantiationException.#ctor(System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="msg"></param>
             <param name="args"></param>
        </member>
        <member name="T:Realm.Library.Common.Exceptions.GeneralException">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.GeneralException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.GeneralException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.GeneralException.#ctor(System.String)">
             <summary>
            
             </summary>
             <param name="msg"></param>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.GeneralException.#ctor(System.String,System.Exception)">
             <summary>
            
             </summary>
             <param name="msg"></param>
             <param name="ex"></param>
        </member>
        <member name="M:Realm.Library.Common.Exceptions.GeneralException.#ctor(System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="msg"></param>
             <param name="args"></param>
        </member>
        <member name="T:Realm.Library.Common.Extensions.CharExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Extensions.CharExtensions.IsVowel(System.Char)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="T:Realm.Library.Common.ExceptionHandlingOptions">
            <summary>
            Behavior options for how exceptions can be handled
            </summary>
        </member>
        <member name="F:Realm.Library.Common.ExceptionHandlingOptions.RecordAndThrow">
             <summary>
            
             </summary>
        </member>
        <member name="F:Realm.Library.Common.ExceptionHandlingOptions.RecordOnly">
             <summary>
            
             </summary>
        </member>
        <member name="F:Realm.Library.Common.ExceptionHandlingOptions.ThrowOnly">
             <summary>
            
             </summary>
        </member>
        <member name="F:Realm.Library.Common.ExceptionHandlingOptions.Suppress">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.FuncExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.FuncExtensions.WithRetry``1(System.Func{``0})">
            <summary>
            Takes a function and retries its execution up to 3 times
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="action">Func to execute</param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.FuncExtensions.Partial``2(System.Func{``0,``1},``0)">
            <summary>
            Returns a function that wraps the execution of that func that is passed
            as a parameter (and passing in the parameter it expects)
            </summary>
            <example>
            var client = new WebClient();
            Func&lt;string, string&gt; download = url => client.DownloadString(url);
            var data = download.Partial(url).WithRetry();
            </example>
            <typeparam name="TParam1">Type of parameter</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="func">Expects to be passed the parameter and returns a result</param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.FuncExtensions.Curry``2(System.Func{``0,``1})">
            <summary>
            Transforms a function that takes N parameters into a function that
            you invoke to apply a parameter and get back as a result a function
            that takes N-1 parameters
            </summary>
            <example>
            var client = new WebClient();
            Func&lt;string, string&gt; download = url => client.DownloadString(url);
            Func&lt;string, Func&lt;string&gt;&gt; downloadCurry = download.Curry();
            var data = downloadCurry(url).WithRetry();
            </example>
            <typeparam name="TParam1">Type of parameter</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="func">Func that expects to be passed the paramter and returns a result</param>
            <returns></returns>
        </member>
        <member name="T:Realm.Library.Common.TaskExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.TaskExtensions.Cancel(System.Threading.Tasks.Task,System.Threading.CancellationTokenSource)">
            <summary>
            Does any task clean-up
            </summary>
            <param name="task"></param>
            <param name="tokenSource"></param>
        </member>
        <member name="T:Realm.Library.Common.TypeExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.TypeExtensions.Instantiate``1(System.Type,System.Object[])">
            <summary>
            Instantiates an object of the given type and passes the supplied
            arguments to the constructor
            </summary>
        </member>
        <member name="T:Realm.Library.Common.ITimer">
            <summary>
            Declares a timer interface
            </summary>
        </member>
        <member name="M:Realm.Library.Common.ITimer.Start(System.Nullable{System.Double})">
             <summary>
            
             </summary>
             <param name="interval"></param>
        </member>
        <member name="M:Realm.Library.Common.ITimer.Stop">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.ITimer.Interval">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.ITimer.Enabled">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Common.ITimer.Elapsed">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.OnGameInitialize">
            <summary>
            Core event type used when the game is initialized
            </summary>
        </member>
        <member name="T:Realm.Library.Common.EventBase">
            <summary>
            Abstract class that defines the
            </summary>
        </member>
        <member name="T:Realm.Library.Common.IEventBase">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.IEventBase.Name">
            <summary>
            The name of the event
            </summary>
        </member>
        <member name="P:Realm.Library.Common.IEventBase.Sender">
            <summary>
            The object that sent this event
            </summary>
        </member>
        <member name="P:Realm.Library.Common.IEventBase.Args">
            <summary>
            The argument package for the event
            </summary>
        </member>
        <member name="P:Realm.Library.Common.EventBase.Name">
            <summary>
            The name of the event
            </summary>
        </member>
        <member name="P:Realm.Library.Common.EventBase.Sender">
            <summary>
            The object that sent this event
            </summary>
        </member>
        <member name="P:Realm.Library.Common.EventBase.Callback">
            <summary>
            The function to call when the event is triggered
            </summary>
        </member>
        <member name="P:Realm.Library.Common.EventBase.Args">
            <summary>
            The argument package for the event
            </summary>
        </member>
        <member name="M:Realm.Library.Common.OnGameInitialize.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.Collections.SerializableDictionary`2">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVal"></typeparam>
        </member>
        <member name="M:Realm.Library.Common.Collections.SerializableDictionary`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Collections.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Realm.Library.Common.Collections.SerializableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Realm.Library.Common.Collections.SerializableDictionary`2.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Realm.Library.Common.Collections.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Realm.Library.Common.Collections.SerializableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="capacity"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Realm.Library.Common.Collections.SerializableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Realm.Library.Common.Collections.SerializableDictionary`2.ValueSerializer">
            <summary>
            
            </summary>
        </member>
        <member name="T:Realm.Library.Common.LinkedList.SingleLinkedList`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Realm.Library.Common.LinkedList.SingleLinkedList`1.Push(`0)">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Realm.Library.Common.LinkedList.SingleLinkedList`1.Pop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.LinkedList.SingleLinkedList`1.Reverse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Realm.Library.Common.LinkedList.SingleLinkedList`1.ToEnumerable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Realm.Library.Common.LinkedList.SingleLinkedList`1.Head">
            <summary>
            
            </summary>
        </member>
        <member name="P:Realm.Library.Common.LinkedList.SingleLinkedList`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Realm.Library.Common.LinkedList.SingleLinkedList`1.First">
            <summary>
            
            </summary>
        </member>
        <member name="P:Realm.Library.Common.LinkedList.SingleLinkedList`1.Last">
            <summary>
            
            </summary>
        </member>
        <member name="P:Realm.Library.Common.LinkedList.SingleLinkedList`1.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Realm.Library.Common.LinkedList.SingleLinkedNode`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Realm.Library.Common.LinkedList.SingleLinkedNode`1.Data">
            <summary>
            
            </summary>
        </member>
        <member name="P:Realm.Library.Common.LinkedList.SingleLinkedNode`1.Next">
            <summary>
            
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Logging.LogLevel">
            <summary>
            Critical level of the Log event
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Logging.LogWrapper">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Logging.LogWrapper.#ctor(log4net.ILog,Realm.Library.Common.Logging.LogLevel)">
             <summary>
            
             </summary>
             <param name="log"></param>
             <param name="level"></param>
        </member>
        <member name="M:Realm.Library.Common.Logging.LogWrapper.LogThis(Realm.Library.Common.Logging.LogLevel)">
             <summary>
            
             </summary>
             <param name="logLevel"></param>
             <returns></returns>
        </member>
        <member name="E:Realm.Library.Common.Logging.LogWrapper.OnLoggingEvent">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.Logging.LogWrapper.Log">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.Logging.LogWrapper.Logger">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.Logging.LogWrapper.MinLoggingLevel">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.Objects.GameSingleton">
            <summary>
            
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Random">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Random.Between(System.Int32,System.Int32)">
            <summary>
            Generates a random number between the minimum and maximum
            </summary>
            <param name="aMinimum">Minimum value of the roll</param>
            <param name="aMaximum">Maximum value of the roll</param>
            <returns>Returns an integer value</returns>
        </member>
        <member name="M:Realm.Library.Common.Random.Roll(System.Int32,System.Int32)">
            <summary>
            Generates a random number that consists of a number
            of random rolls using the given size and times.
            </summary>
            <param name="aSize">Size of each roll</param>
            <param name="aTimes">Number of Rolls to make</param>
            <returns>Returns an integer value</returns>
        </member>
        <member name="M:Realm.Library.Common.Random.RollSeries(System.Int32,System.Int32)">
            <summary>
            Generates a series of random numbers using the
            given size and the number of times.
            </summary>
            <param name="aSize">Size of each roll</param>
            <param name="aTimes">Number of Rolls to make</param>
            <returns>Returns a list of integers</returns>
        </member>
        <member name="M:Realm.Library.Common.Random.D100(System.Int32)">
            <summary>
            Generates a random number between 1 and 100
            </summary>
            <param name="aTimes">Number of times to roll the die</param>
            <returns>Returns an integer value</returns>
        </member>
        <member name="M:Realm.Library.Common.Random.D20(System.Int32)">
            <summary>
            Generates a random number between 1 and 20
            </summary>
            <param name="aTimes">Number of times to roll the die</param>
            <returns>Returns an integer value</returns>
        </member>
        <member name="M:Realm.Library.Common.Random.D12(System.Int32)">
            <summary>
            Generates a random number between 1 and 12
            </summary>
            <param name="aTimes">Number of times to roll the die</param>
            <returns>Returns an integer value</returns>
        </member>
        <member name="M:Realm.Library.Common.Random.D10(System.Int32)">
            <summary>
            Generates a random number between 1 and 10
            </summary>
            <param name="aTimes">Number of times to roll the die</param>
            <returns>Returns an integer value</returns>
        </member>
        <member name="M:Realm.Library.Common.Random.D8(System.Int32)">
            <summary>
            Generates a random number between 1 and 8
            </summary>
            <param name="aTimes">Number of times to roll the die</param>
            <returns>Returns an integer value</returns>
        </member>
        <member name="M:Realm.Library.Common.Random.D6(System.Int32)">
            <summary>
            Generates a random number between 1 and 6
            </summary>
            <param name="aTimes">Number of times to roll the die</param>
            <returns>Returns an integer value</returns>
        </member>
        <member name="M:Realm.Library.Common.Random.D4(System.Int32)">
            <summary>
            Generates a random number between 1 and 4
            </summary>
            <param name="aTimes">Number of times to roll the die</param>
            <returns>Returns an integer value</returns>
        </member>
        <member name="T:Realm.Library.Common.CommonTimer">
            <summary>
            Custom timer class implements ITimer and wraps
            an existing System.Timer so that it can be more easily injected.
            </summary>
        </member>
        <member name="M:Realm.Library.Common.CommonTimer.Start(System.Nullable{System.Double})">
            <summary>
            Starts the timer with the given interval
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:Realm.Library.Common.CommonTimer.Stop">
            <summary>
            Stops the timer
            </summary>
        </member>
        <member name="M:Realm.Library.Common.CommonTimer.Dispose">
            <summary>
            Overrides the base Dispose to make this object disposable
            </summary>
        </member>
        <member name="P:Realm.Library.Common.CommonTimer.Interval">
            <summary>
            Gets the interval
            </summary>
        </member>
        <member name="E:Realm.Library.Common.CommonTimer.Elapsed">
            <summary>
            Gets the elapsed event delegate
            </summary>
        </member>
        <member name="P:Realm.Library.Common.CommonTimer.Enabled">
            <summary>
            Is this timer enabled
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Security.Password">
            <summary>
            Utility class that contains password related functions
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Security.Password.ComputeHashV0(Realm.Library.Common.Security.PasswordRequestv0)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Security.Password.ValidatePasswordHashV1(Realm.Library.Common.Security.PasswordRequestv1)">
            <summary>
            Validates a password using two hash values
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Security.Password.ComputeHashV1(Realm.Library.Common.Security.PasswordRequestv1)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Security.Password.GeneratePasswordHash(System.String,System.String)">
            <summary>
            Generates a password hash (:v0 or :v1)
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Security.Password.GenerateRandomToken">
            <summary>
            Generates a random token using a RNGCryptoServiceProvider
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Security.Password.GenerateRandomHexToken">
            <summary>
            Generates a 16-bit hex token using a RNGCryptoServiceProvider
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Security.PasswordRequestv1">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.Security.PasswordRequestv1.PlainPassword">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.Security.PasswordRequestv1.HashedPassword">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.Security.PasswordRequestv1.PreHash">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.Security.PasswordRequestv1.PostHash">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.Security.StringExtensions">
             <summary>
            
             </summary>
             <remarks>Obtained from <a href="http://www.sortedbits.com/string-extension-methods-for-c-2/">http://www.sortedbits.com/string-extension-methods-for-c-2/</a></remarks>
        </member>
        <member name="M:Realm.Library.Common.Security.StringExtensions.ToSHA1(System.String,System.Text.Encoding)">
             <summary>
            
             </summary>
             <param name="text"></param>
             <param name="enc"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Security.StringExtensions.ToMD5(System.String)">
             <summary>
            
             </summary>
             <param name="input"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Security.StringExtensions.Encrypt(System.String,System.String)">
             <summary>
            
             </summary>
             <param name="Message"></param>
             <param name="passphrase"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Security.StringExtensions.Decrypt(System.String,System.String)">
             <summary>
            
             </summary>
             <param name="Message"></param>
             <param name="passphrase"></param>
             <returns></returns>
        </member>
        <member name="T:Realm.Library.Common.Security.PasswordRequestv0">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.Security.PasswordRequestv0.PlainPassword">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.Security.PasswordRequestv0.HashedPassword">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Common.Security.PasswordRequestv0.HashSalt">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Common.BinaryExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.BinaryExtensions.FromBinary``1(System.Byte[])">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="bytes"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.BinaryExtensions.ToBinary``1(``0)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="T:Realm.Library.Common.JSONExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.JSONExtensions.ToJSON``1(``0)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.JSONExtensions.FromJSON``1(System.String)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.TextReaderProxy.ReadLine">
            <summary>
            Reads the entire line from the stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.TextReaderProxy.ReadToEnd">
            <summary>
            Reads to the end of the stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.TextReaderProxy.ReadNextLetter">
            <summary>
            Reads the next letter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.TextReaderProxy.ReadToEndOfLine(System.Boolean)">
            <summary>
            Reads to the end of the current line
            </summary>
            <param name="includeCRLF"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.TextReaderProxy.ReadNextWord">
            <summary>
            Reads the next word (using space character as a delimiter)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.TextReaderProxy.ReadIntoList(System.Char[])">
            <summary>
            Reads the stream into a list
            </summary>
            <param name="splitChars"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.TextReaderProxy.ReadString(System.String)">
            <summary>
            Reads a string from the stream ending at the terminator characters
            </summary>
            <param name="terminatorChars"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.TextReaderProxy.ReadSections(System.String[],System.Collections.Generic.IEnumerable{System.String},System.String[],System.String)">
            <summary>
            Reads a section from a file with given symbols
            </summary>
            <param name="headerChars"></param>
            <param name="commentChars"></param>
            <param name="footerChars"></param>
            <param name="endOfFile"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.TextReaderProxy.ReadNumber">
            <summary>
            Reads a number from a stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.TextReaderProxy.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.TextReaderProxy.EndOfStream">
            <summary>
            Gets if the stream is at the end
            </summary>
        </member>
        <member name="M:Realm.Library.Common.TextWriterProxy.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Validation">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.Validation.IsNotNull(System.Object,System.String)">
            <summary>
            Validates the argument to determine if it is null
            </summary>
            <param name="obj"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Realm.Library.Common.Validation.IsInstanceOfType(System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="type"></param>
        </member>
        <member name="M:Realm.Library.Common.Validation.IsNotNullOrEmpty(System.String,System.String)">
            <summary>
            Validates the string argument for null or empty
            </summary>
            <param name="obj"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Realm.Library.Common.Validation.IsNotEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Validates the collection argument to size
            </summary>
            <param name="value"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:Realm.Library.Common.Validation.IsNotEmpty(System.Collections.ICollection,System.String)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <param name="parameterName"></param>
        </member>
        <member name="M:Realm.Library.Common.Validation.Validate(System.Boolean,System.String,System.Object[])">
            <summary>
            Validates the argument and if it fails throws an ArgumentException
            </summary>
            <param name="arg"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Realm.Library.Common.Validation.Validate``1(System.Boolean,System.String,System.Object[])">
            <summary>
            Validates the argument and if it fails throws an Exception of the given type
            </summary>
            <param name="arg"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Realm.Library.Common.Validation.Validate(System.Action)">
            <summary>
            
            </summary>
            <param name="validationAction"></param>
        </member>
        <member name="T:Realm.Library.Common.DelimiterType">
            <summary>
            WhitespaceDelimiter enumeration which is used to identify types of
            delimiters that are used to separate words in strings.
            </summary>
        </member>
        <member name="T:Realm.Library.Common.DelimiterTypeExtensions">
            <summary>
            Extension class for the DelimiterType enum
            </summary>
        </member>
        <member name="M:Realm.Library.Common.DelimiterTypeExtensions.ValueOf(Realm.Library.Common.DelimiterType)">
            <summary>
            Gets the string value of the enum
            </summary>
            <param name="type">enum reference</param>
            <returns>Returns the value string</returns>
        </member>
        <member name="T:Realm.Library.Common.BooleanSet">
            <summary>
            The BooleanSet class provides a mechanism for waiting for a series of things to
            occur before the next step can proceed.  The object waits for the series to
            be completed and once they are invokes the indicated callback function.
            </summary>
            <remarks>Adapted from BurstOnline BooleanSet, Jon Arney</remarks>
        </member>
        <member name="M:Realm.Library.Common.BooleanSet.#ctor(Realm.Library.Common.EventTable,Realm.Library.Common.EventCallback{Realm.Library.Common.RealmEventArgs})">
            <summary>
            Constructor
            </summary>
            <param name="table"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Realm.Library.Common.BooleanSet.#ctor(System.String,Realm.Library.Common.EventCallback{Realm.Library.Common.RealmEventArgs})">
            <summary>
            Constructor
            </summary>
            <param name="msg"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Realm.Library.Common.BooleanSet.AddItem(System.String)">
            <summary>
            Adds the given itemName to the list of things that this boolean set is waiting for.
            </summary>
            <param name="itemName"></param>
        </member>
        <member name="M:Realm.Library.Common.BooleanSet.HasItem(System.String)">
            <summary>
            Gets if the item name exists in the list of things this set is waiting for
            </summary>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.BooleanSet.CompleteItem(System.String)">
            <summary>
            Indicates to the boolean set that the given item is now complete.
            If that item was the last incomplete item in the boolean set,
            it raises the event for the boolean set on this object.
            </summary>
            <param name="itemName">Name of the item to complete</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">KeyNotFoundException is thrown if the itemName does not exist in the set</exception>
            <exception cref="T:System.Data.NoNullAllowedException">NoNullAllowedException is thrown if the Callback function was not defined</exception>
        </member>
        <member name="P:Realm.Library.Common.BooleanSet.IsComplete">
            <summary>
            Gets if all of the items within the set are complete
            </summary>
        </member>
        <member name="T:Realm.Library.Common.EventListener">
            <summary>
            A listener class that defines what is being listened to, for and who is doing the listening
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EventListener.#ctor(System.Object,System.Object,System.Type,Realm.Library.Common.EventCallback{Realm.Library.Common.RealmEventArgs})">
            <summary>
            Constructor
            </summary>
            <param name="listener"></param>
            <param name="listenTo"></param>
            <param name="eventType"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Realm.Library.Common.EventListener.ToString">
            <summary>
            Override of the ToString function
            </summary>
            <returns></returns>
        </member>
        <member name="P:Realm.Library.Common.EventListener.Listener">
            <summary>
            Who is the doing the listening
            </summary>
        </member>
        <member name="P:Realm.Library.Common.EventListener.ListenTo">
            <summary>
            Who is being listened to
            </summary>
        </member>
        <member name="P:Realm.Library.Common.EventListener.EventType">
            <summary>
            Type of event to listen for
            </summary>
        </member>
        <member name="P:Realm.Library.Common.EventListener.CallbackFunction">
            <summary>
            Function to call when the event is triggered
            </summary>
        </member>
        <member name="T:Realm.Library.Common.EventTable">
            <summary>
            The event table encapsulates a dictionary for the Realm Events
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EventTable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EventTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Realm.Library.Common.CellExtensions">
            <summary>
            Class that handles extension functions to Cell objects
            </summary>
        </member>
        <member name="M:Realm.Library.Common.CellExtensions.CompareName(Realm.Library.Common.ICell,System.String)">
            <summary>
            Performs a case-insensitive compare of the string to the name or ID of the entity
            </summary>
        </member>
        <member name="T:Realm.Library.Common.ExceptionExtensions">
            <summary>
            Class that handles extension functions to Exception objects
            </summary>
        </member>
        <member name="M:Realm.Library.Common.ExceptionExtensions.Handle``1(System.Exception,Realm.Library.Common.ExceptionHandlingOptions,Realm.Library.Common.Logging.ILogWrapper,System.String,System.Object[])">
            <summary>
            Handles exceptions based upon the indicated behavior and throws a new exception of the given
            type, assigning the original exception as the InnerException
            </summary>
        </member>
        <member name="M:Realm.Library.Common.ExceptionExtensions.Handle(System.Exception,Realm.Library.Common.ExceptionHandlingOptions,Realm.Library.Common.Logging.ILogWrapper,System.String,System.Object[])">
            <summary>
            Handles exceptions based upon the indicated behavior and rethrows the Exception
            </summary>
            <param name="exception"></param>
            <param name="exceptionBehavior"></param>
            <param name="log"></param>
            <param name="msg"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Realm.Library.Common.ExceptionExtensions.GetCaller(System.Int32)">
            <summary>
            Gets the calling class and method for the current stack
            </summary>
            <returns>Returns the full name of the class (with namespace) and the calling method</returns>
        </member>
        <member name="T:Realm.Library.Common.ICell">
            <summary>
            Basic interface for the Cell object
            </summary>
        </member>
        <member name="P:Realm.Library.Common.ICell.ID">
            <summary>
            Unique identifier of the object
            </summary>
        </member>
        <member name="P:Realm.Library.Common.ICell.Name">
            <summary>
            Unique name of the object
            </summary>
        </member>
        <member name="T:Realm.Library.Common.IEntity">
            <summary>
            Basic interface for the Entity object
            </summary>
        </member>
        <member name="T:Realm.Library.Common.IEntityFactory">
            <summary>
            Defines the basic entity factory framework
            </summary>
        </member>
        <member name="M:Realm.Library.Common.IEntityFactory.Register(System.Type)">
             <summary>
            
             </summary>
             <param name="type"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.IEntityFactory.Create(Realm.Library.Common.IHelper{System.Type},System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="helper"></param>
             <param name="type"></param>
             <param name="args"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.IEntityFactory.Create(System.Type,System.Object[])">
             <summary>
            
             </summary>
             <param name="type"></param>
             <param name="args"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.IEntityFactory.Create``1(System.Object[])">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="args"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.IEntityFactory.Clone``1(``0,System.Object[])">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="source"></param>
             <param name="args"></param>
             <returns></returns>
        </member>
        <member name="T:Realm.Library.Common.IEntityRepository">
            <summary>
            Public interface for a repository to store objects that implement IEntity
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Cell">
            <summary>
            Atomic abstract object class containing an ID and a Name.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Cell.ID">
            <summary>
            Gets or sets the long ID of the Cell
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Cell.Name">
            <summary>
            Gets or sets the string Name of the Cell
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Entity">
            <summary>
            Defines a generic disposable entity
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Entity.#ctor(System.Int64,System.String)">
            <summary>
            Default constructor for the Entity class
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Entity.Finalize">
            <summary>
            Deconstructor
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Entity.Equals(System.Object)">
            <summary>
            Overrides the Equals function to perform a comparison of ID and Name
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Entity.GetHashCode">
            <summary>
            Overrides the GetHashCode to incorporate a true hash of the object properties
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Entity.Dispose">
            <summary>
            Overrides the base Dispose to make this object disposable
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Entity.Dispose(System.Boolean)">
            <summary>
            Dispose of any internal resources
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Realm.Library.Common.Collections.EntityRepository">
            <summary>
            Stores objects that implement IEntity, derives from Repository
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Property">
            <summary>
            Class that defines a value or modification to an object. A Property
            can describe or modify an object.
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Property.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Realm.Library.Common.Property.Persistable">
            <summary>
            Gets if the property is persisted to the database
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Property.Visible">
            <summary>
            Gets if the property is visible for examination
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Property.Volatile">
            <summary>
            Gets if the property can be changed
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Property.Value">
            <summary>
            Gets the value of the property as an object
            </summary>
        </member>
        <member name="T:Realm.Library.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.ERR_EMPTY_COLLECTION">
            <summary>
              Looks up a localized string similar to Collection contains no values.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.ERR_EVENT_DEQUEUE_FAILURE">
            <summary>
              Looks up a localized string similar to Failed to dequeue event from EventQueue.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.ERR_EVENT_INSTANTIATE_FAILURE">
            <summary>
              Looks up a localized string similar to Failed to create Event of type {0}..
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.ERR_INVALID_FREQUENCY">
            <summary>
              Looks up a localized string similar to Frequency value of {0} is not allowed..
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.ERR_INVALID_HOUR">
            <summary>
              Looks up a localized string similar to Invalid hour (must be between 0 and 24).
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.ERR_INVALID_TYPE">
            <summary>
              Looks up a localized string similar to Object is not and does not derive from type {0}..
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.ERR_KEY_NOT_FOUND">
            <summary>
              Looks up a localized string similar to {0} not found.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.ERR_NO_VALUE">
            <summary>
              Looks up a localized string similar to {0} does not contain a value member = {1}.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.ERR_NULL_CALLBACK">
            <summary>
              Looks up a localized string similar to Callback function was null.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.ERR_NULL_PARAMETER">
            <summary>
              Looks up a localized string similar to Parameter is null.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.LOG_BOOL_ATOM_FORMAT">
            <summary>
              Looks up a localized string similar to {0}:{1}(BoolAtom).
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.LOG_DICT_ATOM_FORMAT">
            <summary>
              Looks up a localized string similar to {0} (DictionaryAtom).
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.LOG_DICT_ATOM_KEY">
            <summary>
              Looks up a localized string similar to {0}.{1}.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.LOG_DICT_ATOM_NULL_KEY">
            <summary>
              Looks up a localized string similar to {0}.{1} (null).
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.LOG_INT_ATOM_FORMAT">
            <summary>
              Looks up a localized string similar to {0}:{1}(IntAtom).
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.LOG_LIST_ATOM_FORMAT">
            <summary>
              Looks up a localized string similar to {0}(ListAtom).
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.LOG_OBJECT_ATOM_FORMAT">
            <summary>
              Looks up a localized string similar to {0}:{1}(ObjectAtom).
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.LOG_REAL_ATOM_FORMAT">
            <summary>
              Looks up a localized string similar to {0}:{1}(RealAtom).
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.LOG_STRING_ATOM_FORMAT">
            <summary>
              Looks up a localized string similar to {0}:{1}(StringAtom).
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_AFTERNOON">
            <summary>
              Looks up a localized string similar to in the afternoon.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_AND">
            <summary>
              Looks up a localized string similar to and.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_EIGHT">
            <summary>
              Looks up a localized string similar to eight.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_EIGHTEEN">
            <summary>
              Looks up a localized string similar to eighteen.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_EIGHTY">
            <summary>
              Looks up a localized string similar to eighty.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_ELEVEN">
            <summary>
              Looks up a localized string similar to eleven.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_EVENING">
            <summary>
              Looks up a localized string similar to in the evening.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_EXCEPTION_LOCATION">
            <summary>
              Looks up a localized string similar to Exception occurred in {0}.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_FIFTEEN">
            <summary>
              Looks up a localized string similar to fifteen.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_FIFTY">
            <summary>
              Looks up a localized string similar to fifty.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_FIVE">
            <summary>
              Looks up a localized string similar to five.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_FORTY">
            <summary>
              Looks up a localized string similar to forty.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_FOUR">
            <summary>
              Looks up a localized string similar to four.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_FOURTEEN">
            <summary>
              Looks up a localized string similar to fourteen.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_HUNDRED">
            <summary>
              Looks up a localized string similar to hundred.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_INITIALIZE_MANAGER">
            <summary>
              Looks up a localized string similar to Manager {0} initialized..
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_MILLION">
            <summary>
              Looks up a localized string similar to million.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_MINUS">
            <summary>
              Looks up a localized string similar to minus.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_MORNING">
            <summary>
              Looks up a localized string similar to in the morning.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_NIGHT">
            <summary>
              Looks up a localized string similar to at night.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_NINE">
            <summary>
              Looks up a localized string similar to nine.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_NINETEEN">
            <summary>
              Looks up a localized string similar to nineteen.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_NINETY">
            <summary>
              Looks up a localized string similar to ninety.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_ONE">
            <summary>
              Looks up a localized string similar to one.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_SEVEN">
            <summary>
              Looks up a localized string similar to seven.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_SEVENTEEN">
            <summary>
              Looks up a localized string similar to seventeen.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_SEVENTY">
            <summary>
              Looks up a localized string similar to seventy.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_SIX">
            <summary>
              Looks up a localized string similar to six.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_SIXTEEN">
            <summary>
              Looks up a localized string similar to sixteen.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_SIXTY">
            <summary>
              Looks up a localized string similar to sixty.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_TEN">
            <summary>
              Looks up a localized string similar to ten.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_THIRTEEN">
            <summary>
              Looks up a localized string similar to thirteen.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_THIRTY">
            <summary>
              Looks up a localized string similar to thirty.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_THOUSAND">
            <summary>
              Looks up a localized string similar to thousand.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_THREE">
            <summary>
              Looks up a localized string similar to three.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_TWELVE">
            <summary>
              Looks up a localized string similar to twelve.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_TWENTY">
            <summary>
              Looks up a localized string similar to twenty.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_TWO">
            <summary>
              Looks up a localized string similar to two.
            </summary>
        </member>
        <member name="P:Realm.Library.Common.Properties.Resources.MSG_ZERO">
            <summary>
              Looks up a localized string similar to zero.
            </summary>
        </member>
        <member name="T:Realm.Library.Common.ValueAttribute">
            <summary>
            Class definining an attribute
            </summary>
        </member>
        <member name="M:Realm.Library.Common.ValueAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Realm.Library.Common.NameAttribute"/> class
            </summary>
            <param name="value">value of the attribute</param>
        </member>
        <member name="P:Realm.Library.Common.ValueAttribute.Value">
            <summary>
            Read-Only value of the attribute
            </summary>
        </member>
        <member name="T:Realm.Library.Common.EnumAttribute">
            <summary>
            Class definining an attribute
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EnumAttribute.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realm.Library.Common.EnumAttribute"/> class
            </summary>
            <param name="name">Name of the attribute</param>
            <param name="value">Value of the attribute</param>
            <param name="shortName">Short Name of the attribute</param>
            <param name="extraData">Extra string data of the attribute</param>
        </member>
        <member name="P:Realm.Library.Common.EnumAttribute.Name">
            <summary>
            Read-Only name of the attribute
            </summary>
        </member>
        <member name="P:Realm.Library.Common.EnumAttribute.Value">
            <summary>
            Read-Only value of the attribute
            </summary>
        </member>
        <member name="P:Realm.Library.Common.EnumAttribute.ShortName">
            <summary>
            Read-Only short name of the attribute
            </summary>
        </member>
        <member name="P:Realm.Library.Common.EnumAttribute.ExtraData">
            <summary>
            Read-Only extra string data of the attribute
            </summary>
        </member>
        <member name="T:Realm.Library.Common.NameAttribute">
            <summary>
            Class definining an attribute
            </summary>
        </member>
        <member name="M:Realm.Library.Common.NameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Realm.Library.Common.NameAttribute"/> class
            </summary>
            <param name="name">name of the attribute</param>
        </member>
        <member name="P:Realm.Library.Common.NameAttribute.Name">
            <summary>
            Read-Only name of the attribute
            </summary>
        </member>
        <member name="T:Realm.Library.Common.EnumerationExtensions">
            <summary>
            Static class used to extend <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="M:Realm.Library.Common.EnumerationExtensions.GetName(System.Enum)">
            <summary>
            Gets the value of the string name attribute from the enumeration
            </summary>
            <exception cref="T:System.ArgumentNullException">If the value is null, throws an ArgumentNullException</exception>
        </member>
        <member name="M:Realm.Library.Common.EnumerationExtensions.GetValue(System.Enum)">
            <summary>
            Gets the value of the integer value attribute from the enumeration
            </summary>
            <exception cref="T:System.ArgumentNullException">If the value is null, throws an ArgumentNullException</exception>
        </member>
        <member name="M:Realm.Library.Common.EnumerationExtensions.GetShortName(System.Enum)">
            <summary>
            Gets the value of the string short name attribute from the enumeration
            </summary>
            <exception cref="T:System.ArgumentNullException">If the value is null, throws an ArgumentNullException</exception>
        </member>
        <member name="M:Realm.Library.Common.EnumerationExtensions.GetExtraData(System.Enum)">
            <summary>
            Gets the value of the string extra data attribute from the enumeration
            </summary>
            <exception cref="T:System.ArgumentNullException">If the value is null, throws an ArgumentNullException</exception>
        </member>
        <member name="M:Realm.Library.Common.EnumerationExtensions.ParseExtraData(System.Enum,System.String)">
            <summary>
            Gets the value of the string extra data attribute and looks for the delimiter character,
            if found splits the data string and returns an enumerable list of values
            </summary>
            <exception cref="T:System.ArgumentNullException">If the value is null, throws an ArgumentNullException</exception>
        </member>
        <member name="M:Realm.Library.Common.EnumerationExtensions.GetEnum``1(System.Int32)">
            <summary>
            Converts an integer value into a member of the enumeration type
            </summary>
            <exception cref="T:System.ArgumentException">If the member is not found, throws an ArgumentException</exception>
        </member>
        <member name="M:Realm.Library.Common.EnumerationExtensions.GetEnum``1(System.String)">
            <summary>
            Converts a string value into a member of the enumeration type
            </summary>
            <exception cref="T:System.ArgumentException">If the member is not found, throws an ArgumentException</exception>
        </member>
        <member name="M:Realm.Library.Common.EnumerationExtensions.HasBit(System.Enum,System.Int32)">
            <summary>
            Gets if the bit field contains the given enumeration
            </summary>
        </member>
        <member name="T:Realm.Library.Common.ObjectExtensions">
            <summary>
            Class that handles extension functions to objects
            </summary>
        </member>
        <member name="M:Realm.Library.Common.ObjectExtensions.CastAs``1(System.Object)">
            <summary>
            Converts to object to the given type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.ObjectExtensions.TryCastAs``1(System.Object,``0)">
            <summary>
            Attempts to convert the object to the given type, but if it fails
            rather than throwing an exception it returns the default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.ObjectExtensions.ToNullable``1(System.Object)">
            <summary>
            Converts the object to a nullable of the same type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.ObjectExtensions.IsNull``1(``0)">
            <summary>
            Quick check for null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.ObjectExtensions.IsNotNull``1(``0)">
            <summary>
            Quick check for not-null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.ObjectExtensions.IsNullOrDBNull``1(``0)">
            <summary>
            Gets if the object is null or dbnull
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.ObjectExtensions.OrElse``1(``0,``0[])">
            <summary>
            In case a value is null (happens only in production ;-)) then this extension method tries one of the
            other values that it receives as arguments and returns the first value that is not null.
            </summary>
        </member>
        <member name="M:Realm.Library.Common.ObjectExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Realm.Library.Common.StringBuilderExtensions">
            <summary>
            Static class used to extend the <see cref="T:System.Text.StringBuilder"/> class
            </summary>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.CapitalizeFirst(System.Text.StringBuilder)">
            <summary>
            Capitalizes the first letter of the String in the StringBuilder object
            </summary>
            <param name="sb">StringBuilder object</param>
            <returns>Returns a new stringbuilder object</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.IndexOfAny(System.Text.StringBuilder,System.Char[],System.Int32)">
            <summary>
            Returns the first index of any of the passed characters found in
            the String in the StringBuilder object
            </summary>
            <param name="sb">StringBuilder object</param>
            <param name="characters">Array of characters to index</param>
            <param name="startIndex">Index to begin searching at</param>
            <returns>Returns the first index in the stringbuilder class of the characters</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.Substring(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Gets a substring from the stringbuilder object
            </summary>
            <param name="sb">StringBuilder object</param>
            <param name="startIndex">Index to begin retrieval at</param>
            <param name="length">Number of characters to return</param>
            <returns>Returns the substring from the stringbuilder object</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.Remove(System.Text.StringBuilder,System.Char)">
            <summary>
            Removes the indicated character from the stringbuilder object
            </summary>
            <param name="sb">StringBuilder object</param>
            <param name="value">Character to remove</param>
            <returns>Returns a new stringbuilder object</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.RemoveFromEnd(System.Text.StringBuilder,System.Int32)">
            <summary>
            Removes the number of characters from the end of the StringBuilder object
            </summary>
            <param name="sb">StringBuilder object</param>
            <param name="value">Number of characters to remove</param>
            <returns>Returns a new stringbuilder object</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.Clear(System.Text.StringBuilder)">
            <summary>
            Clears the stringbuilder object
            </summary>
            <param name="sb">StringBuilder object</param>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.LTrim(System.Text.StringBuilder)">
            <summary>
            Trim left spaces of string
            </summary>
            <param name="sb">StringBuilder object</param>
            <returns>Returns a new stringbuilder object</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.RTrim(System.Text.StringBuilder)">
            <summary>
            Trim right spaces of string
            </summary>
            <param name="sb">StringBuilder object</param>
            <returns>Returns a new stringbuilder object</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.Trim(System.Text.StringBuilder)">
            <summary>
            Trim spaces around string
            </summary>
            <param name="sb">StringBuilder object</param>
            <returns>Returns a new stringbuilder object</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.Char)">
            <summary>
            Get index of a char
            </summary>
            <param name="sb">StringBuilder object</param>
            <param name="value">Character to search for</param>
            <returns>Returns the index of the indicated character, -1 if not found</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.ReplaceFirst(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Replaces the first instance of the given string with the new one
            </summary>
            <param name="sb">StringBuilder object</param>
            <param name="oldValue">Old string to search for</param>
            <param name="newValue">New string to replace with</param>
            <returns>Returns a new stringbuilder object</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.Char,System.Int32)">
            <summary>
            Get index of a char starting from a given index
            </summary>
            <param name="sb">StringBuilder object</param>
            <param name="value">Character to search for</param>
            <param name="startIndex">Index to begin at</param>
            <returns>Returns the index of the given character, -1 if not found</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String)">
            <summary>
            Get index of a string
            </summary>
            <param name="sb">StringBuilder object</param>
            <param name="value">String to search for</param>
            <returns>Returns the index of the string, -1 if not found</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
            Get index of a string from a given index
            </summary>
            <param name="sb">StringBuilder object</param>
            <param name="value">String to search for</param>
            <param name="startIndex">Index to begin at</param>
            <returns>Returns the index of the given string, -1 if not found</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.IndexOfAndIgnoreCase(System.Text.StringBuilder,System.String)">
            <summary>
            Get index of a string with case option
            </summary>
            <param name="sb">StringBuilder object</param>
            <param name="value">String to search for</param>
            <returns>Returns the index of the given string, -1 if not found</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.StartsWith(System.Text.StringBuilder,System.String)">
            <summary>
            Determine whether a string starts with a given text
            </summary>
            <param name="sb">StringBuilder object</param>
            <param name="value">String to search for</param>
            <returns>Returns true if the stringbuilder object begins with the given string</returns>
        </member>
        <member name="M:Realm.Library.Common.StringBuilderExtensions.StartsWithAndIgnoreCase(System.Text.StringBuilder,System.String)">
            <summary>
            Determine whether a string starts with a given text (with case option)
            </summary>
            <param name="sb">StringBuilder object</param>
            <param name="value">String to search for</param>
            <returns>Returns true if the stringbuilder object begins with the given string</returns>
        </member>
        <member name="T:Realm.Library.Common.Extensions.StringExtensions">
            <summary>
            Extension class for String objects
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.ToByteArray(System.String)">
            <summary>
            Convert a string to a byte array.
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.FirstWord(System.String)">
            <summary>
            Gets the first word in the string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.SecondWord(System.String)">
            <summary>
            Gets the second word in the string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.ThirdWord(System.String)">
            <summary>
            Gets the third word in the string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Allows a contains check to be passed a string comparison value (allows for case-insensitive contains)
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            Replaces the first occurrence of the string
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.CapitalizeFirst(System.String)">
            <summary>
            Capitalizes the first letter of the string
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.ParseWord(System.String,System.Int32,System.String)">
            <summary>
            Parses the given word from the string
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.PadStringToFront(System.String,System.String,System.Int32)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <param name="padChar"></param>
             <param name="totalLength"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.PadString(System.String,System.String,System.Int32)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <param name="padChar"></param>
             <param name="totalLength"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.PadString(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Pads characters to the front or back of the string
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.RemoveWord(System.String,System.Int32)">
            <summary>
            Removes the word from the string at the given index
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.Trim(System.String,System.String)">
            <summary>
            Trims the delimiter from the given string
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.Split(System.String,System.Char[])">
            <summary>
            Converts a string to a list of words by splitting them using
            the passed delimiter array.
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.ParseQuantity(System.String)">
            <summary>
            Parses a numerical value out of the string
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.ReplaceAll(System.String,System.Char[],System.Char)">
            <summary>
            Replaces an array of characters in a string
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.RemoveAll(System.String,System.Collections.Generic.ICollection{System.Char})">
            <summary>
            Removes the array of characters from a string
            </summary>
            <param name="value"></param>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.AddArticle(System.String,Realm.Library.Common.ArticleAppendOptions)">
            <summary>
            Takes a given string and modifies it using the indicated parameters, adding
            a new line, or capitalizing the first letter, or appending the/a/an to the front.
            </summary>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.CaseCompare(System.String,System.String)">
            <summary>
            Compares two strings and returns an enumerated value of the result.
            This function is similar to strcmp or strcasecmp in c++
            </summary>
            <param name="value"></param>
            <param name="toCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.IsNumeric(System.String)">
            <summary>
            Returns true if the entire string is a number
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.Extensions.StringExtensions.OneArgument(System.String,System.String@)">
            <summary>
            Gets the first word from the string, removes it, and returns the resulting string
            </summary>
            <param name="phrase"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:Realm.Library.Common.ILogBridge">
            <summary>
            Declares a bridge contract for logging
            </summary>
        </member>
        <member name="M:Realm.Library.Common.ILogBridge.Info(System.Exception)">
            <summary>
            Logs the exception as informational
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Realm.Library.Common.ILogBridge.Info(System.String)">
            <summary>
            Logs the message as informational
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Realm.Library.Common.ILogBridge.Info(System.String,System.Exception)">
            <summary>
            Logs the message and exception as informational
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Realm.Library.Common.ILogBridge.Error(System.Exception)">
            <summary>
            Logs the exception as an error
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Realm.Library.Common.ILogBridge.Error(System.String)">
            <summary>
            Logs the message as an error
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Realm.Library.Common.ILogBridge.Error(System.String,System.Exception)">
            <summary>
            Logs the message and exception as an error
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Realm.Library.Common.PropertyTypeOptions">
            <summary>
            Flag values that describe a Property object's options
            </summary>
        </member>
        <member name="F:Realm.Library.Common.PropertyTypeOptions.None">
            <summary>
            The property has no options
            </summary>
        </member>
        <member name="F:Realm.Library.Common.PropertyTypeOptions.Persistable">
            <summary>
            The property is persisted and saved to the database
            </summary>
        </member>
        <member name="F:Realm.Library.Common.PropertyTypeOptions.Volatile">
            <summary>
            The property is volatile and can be changed
            </summary>
        </member>
        <member name="F:Realm.Library.Common.PropertyTypeOptions.Visible">
            <summary>
            The property is visible
            </summary>
        </member>
        <member name="T:Realm.Library.Common.NumberExtensions">
            <summary>
            Static class for some number extension functions
            </summary>
        </member>
        <member name="M:Realm.Library.Common.NumberExtensions.IsNumeric(System.Object)">
            <summary>
            Verifies if the given string is an integer
            </summary>
            <param name="value">String to check</param>
            <returns>Returns true if the string is an integer</returns>
        </member>
        <member name="M:Realm.Library.Common.NumberExtensions.ToWords(System.Int32)">
            <summary>
            Converts the given number into string form (words)
            </summary>
            <param name="value">Number to convert</param>
            <returns>Returns a string value representing the number in words</returns>
        </member>
        <member name="M:Realm.Library.Common.NumberExtensions.ConvertHour(System.Int32)">
            <summary>
            Converts the numerical hour to a string
            </summary>
            <param name="hour"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.NumberExtensions.ToPeriodOfDay(System.Int32)">
            <summary>
            Converts a numerical hour to a period of the day
            </summary>
            <param name="hour"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.NumberExtensions.GetOrdinal(System.Int32)">
            <summary>
            Appends an ordinal value to the number and convers it to a string
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="T:Realm.Library.Common.RealmEventArgs">
            <summary>
            Event Argument class for the MUD
            </summary>
        </member>
        <member name="M:Realm.Library.Common.RealmEventArgs.#ctor">
            <summary>
            Initializes a new instance of the class
            </summary>
        </member>
        <member name="M:Realm.Library.Common.RealmEventArgs.#ctor(Realm.Library.Common.EventTable)">
            <summary>
            Initializes a new instance of the class with the given event table
            </summary>
        </member>
        <member name="M:Realm.Library.Common.RealmEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with the given type
            </summary>
        </member>
        <member name="M:Realm.Library.Common.RealmEventArgs.#ctor(System.String,Realm.Library.Common.EventTable)">
            <summary>
            Initializes a new instance of the class with the given type and event table
            </summary>
        </member>
        <member name="M:Realm.Library.Common.RealmEventArgs.GetValue(System.String)">
            <summary>
            Gets the given value from the data table
            </summary>
            <param name="key">Name of the data value</param>
            <returns>Returns an object from the data table</returns>
        </member>
        <member name="M:Realm.Library.Common.RealmEventArgs.HasValue(System.String)">
            <summary>
            Gets whether or not the value exists in the data table
            </summary>
            <param name="key">Name of the data value</param>
            <returns>Returns a flag indicating whether or not the data value exists</returns>
        </member>
        <member name="P:Realm.Library.Common.RealmEventArgs.Type">
            <summary>
            The type of event
            </summary>
        </member>
        <member name="P:Realm.Library.Common.RealmEventArgs.Data">
            <summary>
            A dictionary table of key-value data
            </summary>
        </member>
        <member name="P:Realm.Library.Common.RealmEventArgs.Sender">
            <summary>
            The object that sent the event
            </summary>
        </member>
        <member name="T:Realm.Library.Common.XMLExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Common.XMLExtensions.ToXML``1(``0)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Common.XMLExtensions.FromXML``1(System.String)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="obj"></param>
             <returns></returns>
        </member>
    </members>
</doc>
