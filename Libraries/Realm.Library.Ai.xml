<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Realm.Library.Ai</name>
    </assembly>
    <members>
        <member name="T:Realm.Library.Ai.AiAgent">
            <summary>
            Base class that defines the framework for an AiBrain, an object that handles
            the mechanics of the Ai state and message management.
            </summary>
        </member>
        <member name="T:Realm.Library.Ai.IAiAgent">
            <summary>
            Defines the contract for an AiBrain
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.IAiAgent.OnTick">
            <summary>
            Event function that fires on each tick of the AiBrain.
            Must be implemented in derived classes.
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.IAiAgent.PushState(Realm.Library.Ai.IAiState)">
            <summary>
            Pushes a new state onto the Ai state stack.
            </summary>
            <param name="state">Instance object that is implements the IAiState interface</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Realm.Library.Ai.IAiAgent.PopState">
            <summary>
            Pops the top Ai state instance from the state stack.
            </summary>
            <returns>Reference to the freshly popped state</returns>
        </member>
        <member name="M:Realm.Library.Ai.IAiAgent.HasState(Realm.Library.Ai.IAiState)">
            <summary>
            Gets if the Ai state stack contains a reference to the Ai state instance
            </summary>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Realm.Library.Ai.IAiAgent.HasState(System.String)">
            <summary>
            Gets if the Ai state stack contains a reference with a matching name
            </summary>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Realm.Library.Ai.IAiAgent.NeedState">
            <summary>
            Called to inform the AiBrain that it needs to get an Ai state.
            Must be implemented in derived classes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Ai.IAiAgent.Wake">
            <summary>
            Wakes the AiBrain, resumes the current state
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.IAiAgent.Sleep">
            <summary>
            Puts the AiBrian to sleep, pauses the current state
            </summary>
        </member>
        <member name="E:Realm.Library.Ai.IAiAgent.OnAgentWake">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Ai.IAiAgent.OnAgentSleep">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Ai.IAiAgent.OnStateChange">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Ai.IAiAgent.Owner">
            <summary>
            Entity object that owns this AiBrain
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.IAiAgent.Messages">
            <summary>
            Message handler, which maintains and processes internal messages
            for the AiBrain
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.IAiAgent.Behavior">
            <summary>
            Reference to the behavior that determines what states this AiBrain
            uses and how they operate.
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.IAiAgent.CurrentState">
            <summary>
            Gets a reference to the current Ai state instance on the stack
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.IAiAgent.IsAsleep">
            <summary>
            Gets if the AiBrain is currently asleep
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.AiAgent.#ctor(Realm.Library.Common.IEntity,Realm.Library.Ai.IMessageContext,Realm.Library.Ai.IBehavior)">
            <summary>
            Constructor
            </summary>
            <param name="owner"></param>
            <param name="messageContext"></param>
            <param name="behavior"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Realm.Library.Ai.AiAgent.OnTick">
            <summary>
            Event function that fires on each tick of the AiBrain.
            Must be implemented in derived classes.
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.AiAgent.PushState(Realm.Library.Ai.IAiState)">
            <summary>
            Pushes a new state onto the Ai state stack.
            </summary>
            <param name="state">Instance object that is implements the IAiState interface</param>
        </member>
        <member name="M:Realm.Library.Ai.AiAgent.PopState">
            <summary>
            Pops the top Ai state instance from the state stack.
            </summary>
            <returns>Reference to the freshly popped state</returns>
        </member>
        <member name="M:Realm.Library.Ai.AiAgent.HasState(Realm.Library.Ai.IAiState)">
            <summary>
            Gets if the Ai state stack contains a reference to the Ai state instance
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Ai.AiAgent.HasState(System.String)">
            <summary>
            Gets if the Ai state stack contains a reference with a matching name
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Realm.Library.Ai.AiAgent.NeedState">
            <summary>
            Called to inform the AiBrain that it needs to get an Ai state.
            Must be implemented in derived classes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Ai.AiAgent.Wake">
            <summary>
            Wakes the AiBrain, resumes the current state
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.AiAgent.Sleep">
            <summary>
            Puts the AiBrian to sleep, pauses the current state
            </summary>
        </member>
        <member name="E:Realm.Library.Ai.AiAgent.OnAgentWake">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Ai.AiAgent.OnAgentSleep">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Ai.AiAgent.OnStateChange">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Ai.AiAgent.Owner">
            <summary>
            Entity object that owns this AiBrain
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.AiAgent.Messages">
            <summary>
            Message handler, which maintains and processes internal messages
            for the AiBrain
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.AiAgent.Behavior">
            <summary>
            Reference to the behavior that determines what states this AiBrain
            uses and how they operate.
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.AiAgent.CurrentState">
            <summary>
            Gets a reference to the current Ai state instance on the stack
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.AiAgent.IsAsleep">
            <summary>
            Gets if the AiBrain is currently asleep
            </summary>
        </member>
        <member name="T:Realm.Library.Ai.AiAgentContext">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Ai.IAiAgentContext">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Ai.IAiAgentContext.GetAgents(System.Int32)">
             <summary>
            
             </summary>
             <param name="bucket"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Ai.IAiAgentContext.Register(Realm.Library.Ai.IAiAgent)">
             <summary>
            
             </summary>
             <param name="agent"></param>
        </member>
        <member name="M:Realm.Library.Ai.IAiAgentContext.Unregister(Realm.Library.Ai.IAiAgent)">
             <summary>
            
             </summary>
             <param name="agent"></param>
        </member>
        <member name="M:Realm.Library.Ai.IAiAgentContext.WakeMobs">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Ai.IAiAgentContext.SleepMobs">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Ai.IAiAgentContext.OnAgentRegistered">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Ai.IAiAgentContext.OnAgentUnregistered">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Ai.IAiAgentContext.OnWake">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Ai.IAiAgentContext.OnSleep">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Ai.IAiAgentContext.OnPause">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Ai.IAiAgentContext.Buckets">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Ai.IAiAgentContext.Pause">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Ai.IAiAgentContext.IsPaused">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Ai.IAiAgentContext.IsEnabled">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Ai.AiAgentContext.#ctor(Realm.Library.Common.ITimer,System.Int32,System.Int32)">
             <summary>
            
             </summary>
             <param name="timer"></param>
             <param name="maxBuckets"></param>
             <param name="timerInterval"></param>
        </member>
        <member name="M:Realm.Library.Ai.AiAgentContext.Finalize">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Ai.AiAgentContext.GetAgents(System.Int32)">
             <summary>
            
             </summary>
             <param name="bucket"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Ai.AiAgentContext.Register(Realm.Library.Ai.IAiAgent)">
             <summary>
            
             </summary>
             <param name="agent"></param>
        </member>
        <member name="M:Realm.Library.Ai.AiAgentContext.Unregister(Realm.Library.Ai.IAiAgent)">
             <summary>
            
             </summary>
             <param name="agent"></param>
        </member>
        <member name="M:Realm.Library.Ai.AiAgentContext.WakeMobs">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Ai.AiAgentContext.SleepMobs">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Ai.AiAgentContext.OnAgentRegistered">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Ai.AiAgentContext.OnAgentUnregistered">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Ai.AiAgentContext.OnWake">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Ai.AiAgentContext.OnSleep">
             <summary>
            
             </summary>
        </member>
        <member name="E:Realm.Library.Ai.AiAgentContext.OnPause">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Ai.AiAgentContext.Buckets">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Ai.AiAgentContext.Pause">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Ai.AiAgentContext.IsPaused">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Ai.AiAgentContext.IsEnabled">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Ai.AiAgentRepository">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Ai.AiState">
            <summary>
            Abstract class from which all AiStates are derived
            </summary>
        </member>
        <member name="T:Realm.Library.Ai.IAiState">
            <summary>
            Defines the contract for the AiState
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.IAiState.Execute">
            <summary>
            Called during each update of the AIState
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.IAiState.OnEnter">
            <summary>
            Called whenever the AIState is pushed onto the stack
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.IAiState.OnLeave">
            <summary>
            Called whenever the AIState is popped from the stack
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.IAiState.OnPause">
            <summary>
            Called whenever the AIState is paused
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.IAiState.OnResume">
            <summary>
            Called whenever the AIState is resumed (after being paused)
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.IAiState.IsValid(Realm.Library.Common.Cell)">
            <summary>
            Can validate the Entity receiving the AIState
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="P:Realm.Library.Ai.IAiState.Parent">
            <summary>
            Reference to the AiBrain that controls this AiState
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.IAiState.IsPaused">
            <summary>
            Gets if this AiState is paused
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.AiState.#ctor(System.String,Realm.Library.Ai.IAiAgent)">
            <summary>
            constructor
            </summary>
            <param name="name"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Realm.Library.Ai.AiState.Execute">
            <summary>
            Called during each update of the AIState
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.AiState.OnEnter">
            <summary>
            Called whenever the AIState is pushed onto the stack
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.AiState.OnLeave">
            <summary>
            Called whenever the AIState is popped from the stack
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.AiState.OnPause">
            <summary>
            Called whenever the AIState is paused
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.AiState.OnResume">
            <summary>
            Called whenever the AIState is resumed (after being paused)
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.AiState.IsValid(Realm.Library.Common.Cell)">
            <summary>
            Can validate the Entity receiving the AIState
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="P:Realm.Library.Ai.AiState.Parent">
            <summary>
            Reference to the AiBrain that controls this AiState
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.AiState.IsPaused">
            <summary>
            Gets if this AiState is paused
            </summary>
        </member>
        <member name="T:Realm.Library.Ai.IBehavior">
            <summary>
            Declares the contract for a behavior
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.IBehavior.NeedState">
            <summary>
            Gets a new state from the behavior
            </summary>
            <returns></returns>
        </member>
        <member name="P:Realm.Library.Ai.IBehavior.Bits">
            <summary>
            Gets the bit handler
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.IBehavior.Properties">
            <summary>
            Gets the property handler
            </summary>
        </member>
        <member name="T:Realm.Library.Ai.IMessageContext">
            <summary>
            Declares the contract for a message handler
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.IMessageContext.Add(System.String)">
            <summary>
            Adds a message to the internal stack
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Ai.IMessageContext.Clear">
            <summary>
            Clears all messages
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.IMessageContext.Get">
            <summary>
            Gets the list of messages
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Ai.IMessageContext.Dump(log4net.ILog)">
            <summary>
            Outputs the messages to the given ILog
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:Realm.Library.Ai.MessageContext">
            <summary>
            Message handler class which manages the internal messages for the Aibrain
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.MessageContext.Add(System.String)">
            <summary>
            Adds a message to the internal stack
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Realm.Library.Ai.MessageContext.Get">
            <summary>
            Gets the list of messages
            </summary>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Ai.MessageContext.Clear">
            <summary>
            Clears all messages
            </summary>
        </member>
        <member name="M:Realm.Library.Ai.MessageContext.Dump(log4net.ILog)">
            <summary>
            Outputs the messages to the given ILog
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:Realm.Library.Ai.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.Properties.Resources.MSG_SLEEP">
            <summary>
              Looks up a localized string similar to Mob[{0}, {1}] =&gt; Sleep..
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.Properties.Resources.MSG_STATE_PUSHED">
            <summary>
              Looks up a localized string similar to Mob[{0}, {1}] =&gt; State[{2}, {3}] pushed onto stack..
            </summary>
        </member>
        <member name="P:Realm.Library.Ai.Properties.Resources.MSG_WAKE">
            <summary>
              Looks up a localized string similar to Mob[{0}, {1}] =&gt; Wake..
            </summary>
        </member>
    </members>
</doc>
