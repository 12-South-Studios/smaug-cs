<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Realm.Library.Controls</name>
    </assembly>
    <members>
        <member name="T:Realm.Library.Controls.IBrowseInfo">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Controls.IBrowseInfo.SystemType">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Controls.IBrowseInfo.Id">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Controls.CalendarCell">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.CalendarCell.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.CalendarCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Set the value of the editing control to the current cell value.
            </summary>
            <param name="rowIndex"></param>
            <param name="initialFormattedValue"></param>
            <param name="dataGridViewCellStyle"></param>
        </member>
        <member name="P:Realm.Library.Controls.CalendarCell.EditType">
            <summary>
            Gets type of the editing control that CalendarCell uses.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.CalendarCell.ValueType">
            <summary>
            Gets the type of the value that CalendarCell contains.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.CalendarCell.DefaultNewRowValue">
            <summary>
            Use the current date and time as the default value.
            </summary>
        </member>
        <member name="T:Realm.Library.Controls.CalendarColumn">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.CalendarColumn.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Controls.CalendarColumn.CellTemplate">
            <summary>
            Ensure that the cell used for the template is a CalendarCell.
            </summary>
        </member>
        <member name="T:Realm.Library.Controls.CalendarEditingControl">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.CalendarEditingControl.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.CalendarEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Implements the IDataGridViewEditingControl.GetEditingControlFormattedValue method.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Controls.CalendarEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Implements the IDataGridViewEditingControl.ApplyCellStyleToEditingControl method.
            </summary>
            <param name="dataGridViewCellStyle"></param>
        </member>
        <member name="M:Realm.Library.Controls.CalendarEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Implements the IDataGridViewEditingControl.EditingControlWantsInputKey
            method. Let the DateTimePicker handle the keys listed.
            </summary>
            <param name="key"></param>
            <param name="dataGridViewWantsInputKey"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Controls.CalendarEditingControl.PrepareEditingControlForEdit(System.Boolean)">
            <summary>
            Implements the IDataGridViewEditingControl.PrepareEditingControlForEdit method
            </summary>
            <param name="selectAll"></param>
        </member>
        <member name="M:Realm.Library.Controls.CalendarEditingControl.OnValueChanged(System.EventArgs)">
            <summary>
            Notify the DataGridView that the contents of the cell have changed.
            </summary>
            <param name="eventargs"></param>
        </member>
        <member name="P:Realm.Library.Controls.CalendarEditingControl.EditingControlFormattedValue">
            <summary>
            Implements the IDataGridViewEditingControl.EditingControlFormattedValue property.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.CalendarEditingControl.EditingControlRowIndex">
            <summary>
            Implements the IDataGridViewEditingControl.EditingControlRowIndex property.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.CalendarEditingControl.RepositionEditingControlOnValueChange">
            <summary>
            Implements the IDataGridViewEditingControl.RepositionEditingControlOnValueChange property.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.CalendarEditingControl.EditingControlDataGridView">
            <summary>
            Implements the IDataGridViewEditingControl.EditingControlDataGridView property.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.CalendarEditingControl.EditingControlValueChanged">
            <summary>
            Implements the IDataGridViewEditingControl.EditingControlValueChanged property.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.CalendarEditingControl.EditingPanelCursor">
            <summary>
            Implements the IDataGridViewEditingControl.EditingPanelCursor property.
            </summary>
        </member>
        <member name="T:Realm.Library.Controls.DataGridViewCheckComboBoxControl">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewCheckComboBoxControl.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewCheckComboBoxControl.CheckComboBoxDrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
             <summary>
            
             </summary>
             <param name="sender"></param>
             <param name="e"></param>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewCheckComboBoxControl.CheckComboBoxSelectedIndexChanged(System.Object,System.EventArgs)">
             <summary>
            
             </summary>
             <param name="sender"></param>
             <param name="e"></param>
        </member>
        <member name="T:Realm.Library.Controls.DataGridViewCheckComboBoxControl.CheckComboBoxItem">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewCheckComboBoxControl.CheckComboBoxItem.#ctor(System.String,System.Int32,System.Boolean)">
             <summary>
            
             </summary>
             <param name="text"></param>
             <param name="id"></param>
             <param name="initialCheckState"></param>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewCheckComboBoxControl.CheckComboBoxItem.ToString">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewCheckComboBoxControl.CheckComboBoxItem.Key">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewCheckComboBoxControl.CheckComboBoxItem.ID">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewCheckComboBoxControl.CheckComboBoxItem.CheckState">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewCheckComboBoxControl.CheckComboBoxItem.Text">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Controls.DataGridViewCheckComboBoxCell">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewCheckComboBoxCell.Clone">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewCheckComboBoxCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <param name="rowIndex"></param>
             <param name="cellStyle"></param>
             <param name="valueTypeConverter"></param>
             <param name="formattedValueTypeConverter"></param>
             <param name="context"></param>
             <returns></returns>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewCheckComboBoxCell.EditType">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Controls.DataGridViewNumericNullTextCell">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Controls.DataGridViewNumericTextCell">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericTextCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
             <summary>
            
             </summary>
             <param name="rowIndex"></param>
             <param name="initialFormattedValue"></param>
             <param name="dataGridViewCellStyle"></param>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericTextCell.TxtEditKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Only allow numbers to be entered
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericTextCell.DefaultNewRowValue">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericNullTextCell.DefaultNewRowValue">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Controls.DataGridViewNumericUpDownCell">
            <summary>
            Defines a NumericUpDown cell type for the System.Windows.Forms.DataGridView control
            </summary>
        </member>
        <member name="F:Realm.Library.Controls.DataGridViewNumericUpDownCell.AnyRight">
            <summary>
            Used in TranslateAlignment function
            </summary>
        </member>
        <member name="F:Realm.Library.Controls.DataGridViewNumericUpDownCell.DatagridviewnumericupdowncellDefaultRenderingBitmapWidth">
            <summary>
            Default dimensions of the static rendering bitmap used for the painting of the non-edited cells
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.VkKeyScan(System.Char)">
            <summary>
            Used in KeyEntersEditMode function
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.#ctor">
            <summary>
            Constructor for the DataGridViewNumericUpDownCell cell type
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.Clone">
            <summary>
            Clones a DataGridViewNumericUpDownCell cell, copies all the custom properties.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.Constrain(System.Decimal)">
            <summary>
            Returns the provided value constrained to be within the min and max.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.DetachEditingControl">
            <summary>
            DetachEditingControl gets called by the DataGridView control when the editing session is ending
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.GetAdjustedEditingControlBounds(System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Adjusts the location and size of the editing control given the alignment characteristics of the cell
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.GetErrorIconBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)">
            <summary>
            Customized implementation of the GetErrorIconBounds function in order to draw the potential
            error icon next to the up/down buttons and not on top of them.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Customized implementation of the GetFormattedValue function in order to include the decimal and thousand separator
            characters in the formatted representation of the cell value.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.GetPreferredSize(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Drawing.Size)">
            <summary>
            Custom implementation of the GetPreferredSize function. This implementation uses the preferred size of the base
            DataGridViewTextBoxCell cell and adds room for the up/down buttons.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Custom implementation of the InitializeEditingControl function. This function is called by the DataGridView control
            at the beginning of an editing session. It makes sure that the properties of the NumericUpDown editing control are
            set according to the cell properties.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.KeyEntersEditMode(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Custom implementation of the KeyEntersEditMode function. This function is called by the DataGridView control
            to decide whether a keystroke must start an editing session or not. In this case, a new session is started when
            a digit or negative sign key is hit.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.OnCommonChange">
            <summary>
            Called when a cell characteristic that affects its rendering and/or preferred size has changed.
            This implementation only takes care of repainting the cells. The DataGridView's auto-sizing methods
            also need to be called in cases where some grid elements auto-size.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.OwnsEditingNumericUpDown(System.Int32)">
            <summary>
            Determines whether this cell, at the given row index, shows the grid's editing control or not.
            The row index needs to be provided as a parameter because this cell may be shared among multiple rows.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            Custom paints the cell. The base implementation of the DataGridViewTextBoxCell type is called first,
            dropping the icon error and content foreground parts. Those two parts are painted by this custom implementation.
            In this sample, the non-edited NumericUpDown control is painted by using a call to Control.DrawToBitmap. This is
            an easy solution for painting controls but it's not necessarily the most performant. An alternative would be to paint
            the NumericUpDown control piece by piece (text and up/down buttons).
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.PartPainted(System.Windows.Forms.DataGridViewPaintParts,System.Windows.Forms.DataGridViewPaintParts)">
            <summary>
            Little utility function called by the Paint function to see if a particular part needs to be painted.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Custom implementation of the PositionEditingControl method called by the DataGridView control when it
            needs to relocate and/or resize the editing control.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.SetDecimalPlaces(System.Int32,System.Int32)">
            <summary>
            Utility function that sets a new value for the DecimalPlaces property of the cell. This function is used by
            the cell and column DecimalPlaces property. The column uses this method instead of the DecimalPlaces
            property for performance reasons. This way the column can invalidate the entire column at once instead of
            invalidating each cell of the column individually. A row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.SetIncrement(System.Int32,System.Decimal)">
            <summary>
            Utility function that sets a new value for the Increment property of the cell. This function is used by
            the cell and column Increment property. A row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.SetMaximum(System.Int32,System.Decimal)">
            <summary>
            Utility function that sets a new value for the Maximum property of the cell. This function is used by
            the cell and column Maximum property. The column uses this method instead of the Maximum
            property for performance reasons. This way the column can invalidate the entire column at once instead of
            invalidating each cell of the column individually. A row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.SetMinimum(System.Int32,System.Decimal)">
            <summary>
            Utility function that sets a new value for the Minimum property of the cell. This function is used by
            the cell and column Minimum property. The column uses this method instead of the Minimum
            property for performance reasons. This way the column can invalidate the entire column at once instead of
            invalidating each cell of the column individually. A row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.SetThousandsSeparator(System.Int32,System.Boolean)">
            <summary>
            Utility function that sets a new value for the ThousandsSeparator property of the cell. This function is used by
            the cell and column ThousandsSeparator property. The column uses this method instead of the ThousandsSeparator
            property for performance reasons. This way the column can invalidate the entire column at once instead of
            invalidating each cell of the column individually. A row index needs to be provided as a parameter because
            this cell may be shared among multiple rows.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.ToString">
            <summary>
            Returns a standard textual representation of the cell.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownCell.TranslateAlignment(System.Windows.Forms.DataGridViewContentAlignment)">
            <summary>
            Little utility function used by both the cell and column types to translate a DataGridViewContentAlignment value into
            a HorizontalAlignment value.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownCell.DecimalPlaces">
            <summary>
            The DecimalPlaces property replicates the one from the NumericUpDown control
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownCell.EditingNumericUpDown">
            <summary>
            Returns the current DataGridView EditingControl as a DataGridViewNumericUpDownEditingControl control
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownCell.EditType">
            <summary>
            Define the type of the cell's editing control
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownCell.Increment">
            <summary>
            The Increment property replicates the one from the NumericUpDown control
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownCell.Maximum">
            <summary>
            The Maximum property replicates the one from the NumericUpDown control
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownCell.Minimum">
            <summary>
            The Minimum property replicates the one from the NumericUpDown control
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownCell.ThousandsSeparator">
            <summary>
            The ThousandsSeparator property replicates the one from the NumericUpDown control
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownCell.ValueType">
            <summary>
            Returns the type of the cell's Value property
            </summary>
        </member>
        <member name="T:Realm.Library.Controls.DataGridViewNumericUpDownColumn">
            <summary>
            Custom column type dedicated to the DataGridViewNumericUpDownCell cell type.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownColumn.#ctor">
            <summary>
            Constructor for the DataGridViewNumericUpDownColumn class.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownColumn.ShouldSerializeIncrement">
            Indicates whether the Increment property should be persisted.
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownColumn.ShouldSerializeMaximum">
            Indicates whether the Maximum property should be persisted.
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownColumn.ShouldSerializeMinimum">
            Indicates whether the Maximum property should be persisted.
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownColumn.ToString">
            <summary>
            Returns a standard compact string representation of the column.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownColumn.CellTemplate">
            <summary>
            Represents the implicit cell that gets cloned when adding rows to the grid.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownColumn.DecimalPlaces">
            <summary>
            Replicates the DecimalPlaces property of the DataGridViewNumericUpDownCell cell type.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownColumn.Increment">
            <summary>
            Replicates the Increment property of the DataGridViewNumericUpDownCell cell type.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownColumn.Maximum">
            <summary>
            Replicates the Maximum property of the DataGridViewNumericUpDownCell cell type.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownColumn.Minimum">
            <summary>
            Replicates the Minimum property of the DataGridViewNumericUpDownCell cell type.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownColumn.ThousandsSeparator">
            <summary>
            Replicates the ThousandsSeparator property of the DataGridViewNumericUpDownCell cell type.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownColumn.NumericUpDownCellTemplate">
            <summary>
            Small utility function that returns the template cell as a DataGridViewNumericUpDownCell
            </summary>
        </member>
        <member name="T:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl">
            <summary>
            Defines the editing control for the DataGridViewNumericUpDownCell custom cell type.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.#ctor">
            <summary>
            Constructor of the editing control class
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Method called by the grid before the editing control is shown so it can adapt to the
            provided cell style.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Method called by the grid on keystrokes to determine if the editing control is
            interested in the key or not.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            Returns the current value of the editing control.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.PrepareEditingControlForEdit(System.Boolean)">
            <summary>
            Called by the grid to give the editing control a chance to prepare itself for
            the editing session.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.NotifyDataGridViewOfValueChange">
            <summary>
            Small utility function that updates the local dirty state and
            notifies the grid of the value change.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Listen to the KeyPress notification to know when the value changed, and
            notify the grid of the change.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.OnValueChanged(System.EventArgs)">
            <summary>
            Listen to the ValueChanged notification to forward the change to the grid.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
            <summary>
            A few keyboard messages need to be forwarded to the inner textbox of the
            NumericUpDown control so that the first character pressed appears in it.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.EditingControlDataGridView">
            <summary>
            Property which caches the grid that uses this editing control
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.EditingControlFormattedValue">
            <summary>
            Property which represents the current formatted value of the editing control
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.EditingControlRowIndex">
            <summary>
            Property which represents the row in which the editing control resides
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.EditingControlValueChanged">
            <summary>
            Property which indicates whether the value of the editing control has changed or not
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.EditingPanelCursor">
            <summary>
            Property which determines which cursor must be used for the editing panel,
            i.e. the parent of the editing control.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewNumericUpDownEditingControl.RepositionEditingControlOnValueChange">
            <summary>
            Property which indicates whether the editing control needs to be repositioned
            when its value changes.
            </summary>
        </member>
        <member name="T:Realm.Library.Controls.DataGridViewReadOnlyTextCell">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewReadOnlyTextCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)">
            <summary>
            Set the value of the editing control to the current cell value.
            </summary>
            <param name="rowIndex"></param>
            <param name="initialFormattedValue"></param>
            <param name="dataGridViewCellStyle"></param>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewReadOnlyTextCell.RowId">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewReadOnlyTextCell.DefaultNewRowValue">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Controls.ValidateDragDelegate">
             <summary>
            
             </summary>
             <param name="aBrowseInfo"></param>
             <param name="aLinkCell"></param>
             <returns></returns>
        </member>
        <member name="T:Realm.Library.Controls.DataGridViewTypedLinkCell">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewTypedLinkCell.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewTypedLinkCell.defaultDragValidate(Realm.Library.Controls.IBrowseInfo,Realm.Library.Controls.DataGridViewTypedLinkCell)">
             <summary>
            
             </summary>
             <param name="aBrowseInfo"></param>
             <param name="aLinkCell"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewTypedLinkCell.handleGridDrag(System.Windows.Forms.DragEventArgs,System.Boolean)">
             <summary>
            
             </summary>
             <param name="e"></param>
             <param name="aSetValue"></param>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewTypedLinkCell.Clone">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Controls.DataGridViewTypedLinkCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
             <summary>
            
             </summary>
             <param name="graphics"></param>
             <param name="clipBounds"></param>
             <param name="cellBounds"></param>
             <param name="rowIndex"></param>
             <param name="cellState"></param>
             <param name="value"></param>
             <param name="formattedValue"></param>
             <param name="errorText"></param>
             <param name="cellStyle"></param>
             <param name="advancedBorderStyle"></param>
             <param name="paintParts"></param>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewTypedLinkCell.Icon">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Controls.DataGridViewTypedLinkCell.SystemType">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.Properties.Resources.ERR_DECIMAL_OUT_OF_RANGE">
            <summary>
              Looks up a localized string similar to Decimal value cannot be smaller than 0 or larger than 99..
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.Properties.Resources.ERR_INVALID_GRID">
            <summary>
              Looks up a localized string similar to Cell is detached or its grid has no editing control..
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.Properties.Resources.ERR_VALUE_LESS_THAN_ZERO">
            <summary>
              Looks up a localized string similar to Value cannot be smaller than 0..
            </summary>
        </member>
        <member name="T:Realm.Library.Controls.RichTextBoxEx">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.RichTextBoxEx.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.RichTextBoxEx.InsertLink(System.String)">
            <summary>
            Insert a given text as a link into the RichTextBox at the current insert position.
            </summary>
            <param name="text">Text to be inserted</param>
        </member>
        <member name="M:Realm.Library.Controls.RichTextBoxEx.InsertLink(System.String,System.Int32)">
            <summary>
            Insert a given text at a given position as a link.
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="position">Insert position</param>
        </member>
        <member name="M:Realm.Library.Controls.RichTextBoxEx.InsertLink(System.String,System.String)">
            <summary>
            Insert a given text at at the current input position as a link.
            The link text is followed by a hash (#) and the given hyperlink text, both of
            them invisible.
            When clicked on, the whole link text and hyperlink string are given in the
            LinkClickedEventArgs.
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="hyperlink">Invisible hyperlink string to be inserted</param>
        </member>
        <member name="M:Realm.Library.Controls.RichTextBoxEx.InsertLink(System.String,System.String,System.Int32)">
            <summary>
            Insert a given text at a given position as a link. The link text is followed by
            a hash (#) and the given hyperlink text, both of them invisible.
            When clicked on, the whole link text and hyperlink string are given in the
            LinkClickedEventArgs.
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="hyperlink">Invisible hyperlink string to be inserted</param>
            <param name="position">Insert position</param>
        </member>
        <member name="M:Realm.Library.Controls.RichTextBoxEx.SetSelectionLink(System.Boolean)">
            <summary>
            Set the current selection's link style
            </summary>
            <param name="link">true: set link style, false: clear link style</param>
        </member>
        <member name="P:Realm.Library.Controls.RichTextBoxEx.DetectUrls">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Controls.RichTextBoxEx.SelectionLink">
            <summary>
            Get the link style for the current selection
            </summary>
            <returns>0: link style not set, 1: link style set, -1: mixed</returns>
        </member>
        <member name="T:Realm.Library.Controls.RtfColoring">
            <summary>
            enabes syntaxhighlighting for a richtextbox by using rtf
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.RtfColoring.ProcessRtfColoring(Realm.Library.Controls.SyntaxRichTextBox)">
             <summary>
            
             </summary>
             <param name="richTextBox"></param>
        </member>
        <member name="M:Realm.Library.Controls.RtfColoring.MatchKeyword(System.Text.RegularExpressions.Match)">
             <summary>
            
             </summary>
             <param name="match"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Controls.RtfColoring.MatchString(System.Text.RegularExpressions.Match)">
             <summary>
            
             </summary>
             <param name="match"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Controls.RtfColoring.MatchComment(System.Text.RegularExpressions.Match)">
             <summary>
            
             </summary>
             <param name="match"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Controls.RtfColoring.MatchInteger(System.Text.RegularExpressions.Match)">
             <summary>
            
             </summary>
             <param name="match"></param>
             <returns></returns>
        </member>
        <member name="M:Realm.Library.Controls.RtfColoring.RemoveRtfColors(System.String)">
            <summary>
            remove all rtf-colors from a string
            </summary>
            <param name="strText"></param>
            <returns>String</returns>
        </member>
        <member name="T:Realm.Library.Controls.SyntaxList">
            <summary>
            Class to store syntax objects in.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.SyntaxList.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Controls.SyntaxList.RgList">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Controls.SyntaxList.Color">
             <summary>
            
             </summary>
        </member>
        <member name="T:Realm.Library.Controls.SyntaxRichTextBox">
             <summary>
            
             </summary>
        </member>
        <member name="M:Realm.Library.Controls.SyntaxRichTextBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            WndProc
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Realm.Library.Controls.SyntaxRichTextBox.OnTextChanged(System.EventArgs)">
            <summary>
            OnTextChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Realm.Library.Controls.SyntaxRichTextBox.ProcessLine">
            <summary>
            Process a line.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.SyntaxRichTextBox.ProcessRegex(System.String,System.Drawing.Color)">
            <summary>
            Process a regular expression.
            </summary>
            <param name="strRegex">The regular expression.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Realm.Library.Controls.SyntaxRichTextBox.CompileKeywords">
            <summary>
            Compiles the keywords as a regular expression.
            </summary>
        </member>
        <member name="M:Realm.Library.Controls.SyntaxRichTextBox.ProcessAllLines">
             <summary>
            
             </summary>
        </member>
        <member name="P:Realm.Library.Controls.SyntaxRichTextBox.Settings">
            <summary>
            The settings.
            </summary>
        </member>
        <member name="T:Realm.Library.Controls.SyntaxSettings">
            <summary>
            Settings for the keywords and colors.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.SyntaxSettings.Keywords">
            <summary>
            A list containing all keywords.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.SyntaxSettings.KeywordColor">
            <summary>
            The color of keywords.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.SyntaxSettings.Comment">
            <summary>
            A string containing the comment identifier.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.SyntaxSettings.CommentColor">
            <summary>
            The color of comments.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.SyntaxSettings.EnableComments">
            <summary>
            Enables processing of comments if set to true.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.SyntaxSettings.EnableIntegers">
            <summary>
            Enables processing of integers if set to true.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.SyntaxSettings.EnableStrings">
            <summary>
            Enables processing of strings if set to true.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.SyntaxSettings.StringColor">
            <summary>
            The color of strings.
            </summary>
        </member>
        <member name="P:Realm.Library.Controls.SyntaxSettings.IntegerColor">
            <summary>
            The color of integers.
            </summary>
        </member>
    </members>
</doc>
